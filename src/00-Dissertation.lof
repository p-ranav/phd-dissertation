Figure \hfill Page

\addvspace {10\p@ }
\contentsline {figure}{\numberline {1}{\ignorespaces Embedded Software Development Lifecycle Comparison\relax }}{4}{figure.1}
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2}{\ignorespaces Sample Petri Net, reprinted from \cite {peterson1977petri}\relax }}{11}{figure.2}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3}{\ignorespaces DREMS Component\relax }}{21}{figure.3}
\contentsline {figure}{\numberline {4}{\ignorespaces Component Operation Execution Semantics: This figure shows the DREMS operation scheduling on an incoming operation request. At some time $t_{i}$, the component executor thread is busy executing an operation -- component operations can be triggered into execution by the (1) expiry of a timer, (2) the arrival of a subscription message, or (3) the arrival of a service request. $t\_{req}$ represents the arrival time of a remote request. $t\_{wait}$ is the wait time of this request in the message queue while the current operation is still executing. $t\_{req\_schld}$ is the time stamp at which the current operation completes executing. At this time, the remote request is finally scheduled for execution. $t\_{req\_cmpl}$ is the time stamp at which the remote request completes. The overall time taken by the component to respond to this request is calculated as: $t\_{wait} + t\_{exec} = t\_{req\_cmpl} - t\_{req}$.\relax }}{23}{figure.4}
\contentsline {figure}{\numberline {5}{\ignorespaces Sample Temporal Partition Schedule with Hyperperiod = 300 ms\relax }}{24}{figure.5}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {6}{\ignorespaces Colored Petri Net Analysis Model\relax }}{30}{figure.6}
\contentsline {figure}{\numberline {7}{\ignorespaces Analysis Model - Structural Aspects\relax }}{31}{figure.7}
\contentsline {figure}{\numberline {8}{\ignorespaces Temporal Partition Schedule Data Structure\relax }}{33}{figure.8}
\contentsline {figure}{\numberline {9}{\ignorespaces Component Thread Execution Cycle\relax }}{34}{figure.9}
\contentsline {figure}{\numberline {10}{\ignorespaces Component Operation Scheduling Cycle\relax }}{36}{figure.10}
\contentsline {figure}{\numberline {11}{\ignorespaces RMI Application\relax }}{38}{figure.11}
\contentsline {figure}{\numberline {12}{\ignorespaces RMI Application - Client Timer Operation\relax }}{38}{figure.12}
\contentsline {figure}{\numberline {13}{\ignorespaces RMI Application - Server Operation\relax }}{39}{figure.13}
\contentsline {figure}{\numberline {14}{\ignorespaces Operation Induction\relax }}{40}{figure.14}
\contentsline {figure}{\numberline {15}{\ignorespaces Operation Induction Token\relax }}{40}{figure.15}
\contentsline {figure}{\numberline {16}{\ignorespaces Timer Operations\relax }}{42}{figure.16}
\contentsline {figure}{\numberline {17}{\ignorespaces Grammer for the Business Logic of Component Operations\relax }}{44}{figure.17}
\contentsline {figure}{\numberline {18}{\ignorespaces Sample Business Logic Model\relax }}{47}{figure.18}
\contentsline {figure}{\numberline {19}{\ignorespaces CPN Business Logic Representation\relax }}{48}{figure.19}
\contentsline {figure}{\numberline {20}{\ignorespaces CPN Analysis Model - CPS Sensors\relax }}{49}{figure.20}
\contentsline {figure}{\numberline {21}{\ignorespaces Modeling CPS - Business Logic Integration\relax }}{50}{figure.21}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {22}{\ignorespaces Bounded State Space for a Multi-component Timer example\relax }}{54}{figure.22}
\contentsline {figure}{\numberline {23}{\ignorespaces SearchNodes function provided by CPNTools\relax }}{55}{figure.23}
\contentsline {figure}{\numberline {24}{\ignorespaces Deadline Violation Observer place\relax }}{57}{figure.24}
\contentsline {figure}{\numberline {25}{\ignorespaces SML Query to detect system-wide deadlocks caused by (blocking) cyclic dependencies between components\relax }}{58}{figure.25}
\contentsline {figure}{\numberline {26}{\ignorespaces A Clock Token with Temporal Partitioning\relax }}{63}{figure.26}
\contentsline {figure}{\numberline {27}{\ignorespaces Dynamic Time Progression\relax }}{64}{figure.27}
\contentsline {figure}{\numberline {28}{\ignorespaces Structural Reductions in CPN\relax }}{67}{figure.28}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {29}{\ignorespaces Testbed Architecture\relax }}{73}{figure.29}
\contentsline {figure}{\numberline {30}{\ignorespaces ROSMOD Metamodel\relax }}{76}{figure.30}
\contentsline {figure}{\numberline {31}{\ignorespaces Software Deployment Workflow\relax }}{81}{figure.31}
\contentsline {figure}{\numberline {32}{\ignorespaces Interpreting Execution Time Plots\relax }}{84}{figure.32}
\contentsline {figure}{\numberline {33}{\ignorespaces Experimental Observation: Client-Server Interactions\relax }}{85}{figure.33}
\contentsline {figure}{\numberline {34}{\ignorespaces CPN Analysis Results: Client-Server Interactions\relax }}{85}{figure.34}
\contentsline {figure}{\numberline {35}{\ignorespaces CPN Analysis Results: Client-Server Response Times in Bad Designs\relax }}{87}{figure.35}
\contentsline {figure}{\numberline {36}{\ignorespaces Experimental Observation: Publish-Subscribe Interactions\relax }}{88}{figure.36}
\contentsline {figure}{\numberline {37}{\ignorespaces CPN Analysis Results: Publish-Subscribe Interactions\relax }}{89}{figure.37}
\contentsline {figure}{\numberline {38}{\ignorespaces CPN Analysis Results: Time-triggered Publisher -- Periodicity Issues\relax }}{90}{figure.38}
\contentsline {figure}{\numberline {39}{\ignorespaces Trajectory Planner Test\relax }}{91}{figure.39}
\contentsline {figure}{\numberline {40}{\ignorespaces Experimental Observation: Trajectory Planner\relax }}{92}{figure.40}
\contentsline {figure}{\numberline {41}{\ignorespaces CPN Analysis Results: Trajectory Planner\relax }}{93}{figure.41}
\contentsline {figure}{\numberline {42}{\ignorespaces CPN Analysis - Sensor firing too frequently\relax }}{94}{figure.42}
\contentsline {figure}{\numberline {43}{\ignorespaces Experimental Observation: Periodic Timers\relax }}{95}{figure.43}
\contentsline {figure}{\numberline {44}{\ignorespaces CPN Analysis Results: Periodic Timers\relax }}{96}{figure.44}
\contentsline {figure}{\numberline {45}{\ignorespaces Long Running Operations - Timing Diagram\relax }}{98}{figure.45}
\contentsline {figure}{\numberline {46}{\ignorespaces Experimental Observation: Composed Component Assembly. Notice the long-running operation on Component\_1 consuming 64 sec of CPU during the test. This operation periodically suspends itself so that the Name\_Subscriber\_Operation in Component\_1 can receive messages on the subscriber port.\relax }}{99}{figure.46}
\contentsline {figure}{\numberline {47}{\ignorespaces CPN Analysis Results: Composed Component Assembly\relax }}{100}{figure.47}
\contentsline {figure}{\numberline {48}{\ignorespaces Kerbal Space Program - Flight Control Application - Stack\relax }}{101}{figure.48}
\contentsline {figure}{\numberline {49}{\ignorespaces Stearwing A300 PID Control\relax }}{103}{figure.49}
\contentsline {figure}{\numberline {50}{\ignorespaces Stearwing Flight Control - Experimental Observations\relax }}{104}{figure.50}
\contentsline {figure}{\numberline {51}{\ignorespaces Stearwing Control - CPN Analysis Results\relax }}{105}{figure.51}
\addvspace {10\p@ }
\addvspace {10\p@ }
