<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE workspaceElements PUBLIC "-//CPN//DTD CPNXML 1.0//EN" "http://cpntools.org/DTD/6/cpn.dtd">

<workspaceElements>
  <generator tool="CPN Tools"
             version="3.4.0"
             format="6"/>
  <cpnet>
    <globbox>
      <block id="ID1">
        <id>Standard declarations</id>
        <color id="ID85042">
          <id>UNIT</id>
          <unit/>
          <layout>colset UNIT = unit;</layout>
        </color>
        <color id="ID3">
          <id>INT</id>
          <int/>
        </color>
        <color id="ID4">
          <id>BOOL</id>
          <bool/>
        </color>
        <color id="ID5">
          <id>STRING</id>
          <string/>
        </color>
        <var id="ID1434978211">
          <type>
            <id>INT</id>
          </type>
          <id>num_ths</id>
          <layout>var num_ths:INT;</layout>
        </var>
      </block>
      <block id="ID1431741719">
        <id>Analysis declarations</id>
        <block id="ID1431741855">
          <id>Clock</id>
          <color id="ID1431742003">
            <id>partition</id>
            <record>
              <recordfield>
                <id>part_name</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>exec_t</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>dur</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>pr</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>off</id>
                <id>INT</id>
              </recordfield>
            </record>
            <layout>colset partition = record part_name:STRING *
                                       exec_t:INT * dur:INT * pr:INT * off:INT;</layout>
          </color>
          <color id="ID1431742121">
            <id>schedule</id>
            <list>
              <id>partition</id>
            </list>
            <layout>colset schedule = list partition;</layout>
          </color>
          <color id="ID1431742250">
            <id>node_clock</id>
            <record>
              <recordfield>
                <id>clock_node</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>clock_value</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>schedule</id>
                <id>schedule</id>
              </recordfield>
            </record>
            <layout>colset node_clock = record clock_node:STRING * clock_value:INT * schedule:schedule;</layout>
          </color>
          <color id="ID1431742391">
            <id>node_clocks</id>
            <list>
              <id>node_clock</id>
            </list>
            <layout>colset node_clocks = list node_clock;</layout>
          </color>
          <var id="ID1431743763">
            <type>
              <id>node_clocks</id>
            </type>
            <id>nc</id>
            <layout>var nc:node_clocks;</layout>
          </var>
        </block>
        <block id="ID1431743426">
          <id>Component Operations</id>
          <color id="ID1431744123">
            <id>comp_location</id>
            <record>
              <recordfield>
                <id>node_name</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>comp_name</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>port_name</id>
                <id>STRING</id>
              </recordfield>
            </record>
            <layout>colset comp_location = record node_name:STRING * comp_name:STRING * port_name: STRING;</layout>
          </color>
          <color id="ID1431744384">
            <id>unblk_list</id>
            <list>
              <id>comp_location</id>
            </list>
            <layout>colset unblk_list = list comp_location;</layout>
          </color>
          <color id="ID1431744657">
            <id>call</id>
            <record>
              <recordfield>
                <id>port_type</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>port_name</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>unblk_list</id>
                <id>unblk_list</id>
              </recordfield>
              <recordfield>
                <id>induced</id>
                <id>BOOL</id>
              </recordfield>
              <recordfield>
                <id>call_st</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>call_et</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>call_exec_t</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>call_dur</id>
                <id>INT</id>
              </recordfield>
            </record>
            <layout>colset call = record port_type:STRING * port_name:STRING * unblk_list:unblk_list * induced:BOOL * 
                               call_st:INT * call_et:INT * call_exec_t:INT * call_dur:INT;</layout>
          </color>
          <color id="ID1431745223">
            <id>call_list</id>
            <list>
              <id>call</id>
            </list>
            <layout>colset call_list = list call;</layout>
          </color>
          <color id="ID1431745532">
            <id>opn</id>
            <record>
              <recordfield>
                <id>opname</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>op_node</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>op_comp</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>op_pn</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>op_prio</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>op_dl</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>op_st</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>op_dv</id>
                <id>BOOL</id>
              </recordfield>
              <recordfield>
                <id>op_calls</id>
                <id>call_list</id>
              </recordfield>
            </record>
            <layout>colset opn = record opname:STRING * op_node:STRING * op_comp:STRING * 
                               op_pn:STRING * op_prio:INT * op_dl:INT * op_st:INT * op_dv:BOOL *
                               op_calls:call_list;</layout>
          </color>
          <color id="ID1431745853">
            <id>opn_list</id>
            <list>
              <id>opn</id>
            </list>
            <layout>colset opn_list = list opn;</layout>
          </color>
          <var id="ID1432049087">
            <type>
              <id>opn_list</id>
            </type>
            <id>opn_list</id>
            <layout>var opn_list:opn_list;</layout>
          </var>
        </block>
        <block id="ID1431746013">
          <id>Timers</id>
          <color id="ID1431746521">
            <id>timer_op</id>
            <record>
              <recordfield>
                <id>t_nid</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>t_pr</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>t_off</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>t_op</id>
                <id>opn</id>
              </recordfield>
            </record>
            <layout>colset timer_op = record t_nid:STRING * t_pr:INT * t_off: INT * t_op:opn;</layout>
          </color>
          <color id="ID1431746878">
            <id>timers</id>
            <list>
              <id>timer_op</id>
            </list>
            <layout>colset timers = list timer_op;</layout>
          </color>
          <var id="ID1431756292">
            <type>
              <id>timers</id>
            </type>
            <id>timers</id>
            <layout>var timers:timers;</layout>
          </var>
        </block>
        <block id="ID1432099471">
          <id>Component Message Queue</id>
          <color id="ID1432103642">
            <id>cmq</id>
            <record>
              <recordfield>
                <id>comp_name</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>cmq</id>
                <id>opn_list</id>
              </recordfield>
            </record>
            <layout>colset cmq = record comp_name:STRING * cmq:opn_list;</layout>
          </color>
          <color id="ID1432106441">
            <id>cmq_list</id>
            <list>
              <id>cmq</id>
            </list>
            <layout>colset cmq_list = list cmq;</layout>
          </color>
          <color id="ID1432109252">
            <id>part_cmq</id>
            <record>
              <recordfield>
                <id>cmq_part</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>cmq_list</id>
                <id>cmq_list</id>
              </recordfield>
            </record>
            <layout>colset part_cmq = record cmq_part:STRING * cmq_list:cmq_list;</layout>
          </color>
          <color id="ID1432112075">
            <id>cmqs</id>
            <list>
              <id>part_cmq</id>
            </list>
            <layout>colset cmqs = list part_cmq;</layout>
          </color>
          <color id="ID1432114910">
            <id>node_cmq</id>
            <record>
              <recordfield>
                <id>cmq_node</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>cmqs</id>
                <id>cmqs</id>
              </recordfield>
            </record>
            <layout>colset node_cmq = record cmq_node:STRING * cmqs:cmqs;</layout>
          </color>
          <color id="ID1432117757">
            <id>node_cmq_list</id>
            <list>
              <id>node_cmq</id>
            </list>
            <layout>colset node_cmq_list = list node_cmq;</layout>
          </color>
          <var id="ID1432123473">
            <type>
              <id>node_cmq_list</id>
            </type>
            <id>ncmq_list</id>
            <layout>var ncmq_list:node_cmq_list;</layout>
          </var>
        </block>
        <block id="ID1431786966">
          <id>Component Threads</id>
          <color id="ID1431788554">
            <id>comp_thread</id>
            <record>
              <recordfield>
                <id>comp_node</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>comp_name</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>comp_part</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>comp_prio</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>comp_st</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>comp_op</id>
                <id>opn_list</id>
              </recordfield>
            </record>
            <layout>colset comp_thread = record comp_node:STRING * comp_name:STRING * comp_part:STRING * comp_prio:INT * comp_st:INT * comp_op:opn_list;</layout>
          </color>
          <color id="ID1431790166">
            <id>comp_threads</id>
            <list>
              <id>comp_thread</id>
            </list>
            <layout>colset comp_threads = list comp_thread;</layout>
          </color>
          <color id="ID1431791261">
            <id>part_thread</id>
            <record>
              <recordfield>
                <id>part</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>ths</id>
                <id>comp_threads</id>
              </recordfield>
            </record>
            <layout>colset part_thread = record part:STRING * ths:comp_threads;</layout>
          </color>
          <color id="ID1431792368">
            <id>part_threads</id>
            <list>
              <id>part_thread</id>
            </list>
            <layout>colset part_threads = list part_thread;</layout>
          </color>
          <color id="ID1431793487">
            <id>node_threads</id>
            <record>
              <recordfield>
                <id>nid</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>can_sched</id>
                <id>BOOL</id>
              </recordfield>
              <recordfield>
                <id>node_ths</id>
                <id>part_threads</id>
              </recordfield>
            </record>
            <layout>colset node_threads = record nid:STRING * can_sched:BOOL * node_ths:part_threads;</layout>
          </color>
          <color id="ID1431847671">
            <id>threads</id>
            <list>
              <id>node_threads</id>
            </list>
            <layout>colset threads = list node_threads;</layout>
          </color>
          <var id="ID1431794618">
            <type>
              <id>comp_thread</id>
            </type>
            <id>th</id>
            <id>bth</id>
            <layout>var th, bth: comp_thread;</layout>
          </var>
          <var id="ID1431795760">
            <type>
              <id>comp_threads</id>
            </type>
            <id>ths</id>
            <id>bths</id>
            <id>rest</id>
            <layout>var ths, bths, rest:comp_threads;</layout>
          </var>
          <var id="ID1431796914">
            <type>
              <id>node_threads</id>
            </type>
            <id>nths</id>
            <layout>var nths:node_threads;</layout>
          </var>
          <var id="ID1431852525">
            <type>
              <id>threads</id>
            </type>
            <id>nths_list</id>
            <layout>var nths_list:threads;</layout>
          </var>
        </block>
        <block id="ID1433524906">
          <id>Induction</id>
          <color id="ID1433534540">
            <id>induce_op</id>
            <record>
              <recordfield>
                <id>node_name</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>port_name</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>opn</id>
                <id>opn</id>
              </recordfield>
            </record>
            <layout>colset induce_op = record node_name: STRING * port_name:STRING * opn:opn;</layout>
          </color>
          <color id="ID1433544198">
            <id>induce_op_list</id>
            <list>
              <id>induce_op</id>
            </list>
            <layout>colset induce_op_list = list induce_op;</layout>
          </color>
          <var id="ID1433602648">
            <type>
              <id>induce_op_list</id>
            </type>
            <id>iop_list</id>
            <layout>var iop_list:induce_op_list;</layout>
          </var>
        </block>
      </block>
      <block id="ID1431759393">
        <id>Functions</id>
        <ml id="ID1432740793">val time_res = 1;
val clock_tick = 4;
val clock_limit = 1000;
          <layout>val time_res = 1;
val clock_tick = 4;
val clock_limit = 1000;</layout>
        </ml>
        <ml id="ID1432147048">fun get_node_clock node_name [] = []
  | get_node_clock node_name 
({clock_node=clock_node, clock_value=clock_value, schedule=schedule}::other_node_clocks) = 

if (clock_node = node_name) then 
[{clock_node=clock_node, clock_value=clock_value, schedule=schedule}]
else 
(get_node_clock node_name other_node_clocks);

(* Given a node, give me the node cmq from the node cmq list *)
(* CAUTION - This returns a list - Take the head *)
fun get_node_cmq node_name [] = []
  | get_node_cmq node_name
  ({cmq_node=cmq_node, cmqs=cmqs}::other_cmqs) = 
  if (cmq_node = node_name) then [{cmq_node=cmq_node, cmqs=cmqs}]
  else (get_node_cmq node_name other_cmqs);

(* Given a node, give me the timers from that node *)
fun get_timers node_name [] = []
  | get_timers node_name
     ({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::other_timers) = 
  if (t_nid = node_name) then 
  {t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::(get_timers node_name other_timers)
  else 
  (get_timers node_name other_timers);


(* Have all clocks reached the clock limit? *)
fun reached_limit [] = true
  | reached_limit ({clock_node=clock_node, clock_value=clock_value, schedule=schedule}::other_node_clocks) = 
    if (clock_value &gt;= clock_limit) then 
        true andalso (reached_limit other_node_clocks)
    else false;
          <layout>(* Given a node, give me the node clock from the node clock list *)
(* CAUTION - This returns a list - Take the head *)
fun get_node_clock node_name [] = []
  | get_node_clock node_name 
({clock_node=clock_node, clock_value=clock_value, schedule=schedule}::other_node_clocks) = 

if (clock_node = node_name) then 
[{clock_node=clock_node, clock_value=clock_value, schedule=schedule}]
else 
(get_node_clock node_name other_node_clocks);

(* Given a node, give me the node cmq from the node cmq list *)
(* CAUTION - This returns a list - Take the head *)
fun get_node_cmq node_name [] = []
  | get_node_cmq node_name
  ({cmq_node=cmq_node, cmqs=cmqs}::other_cmqs) = 
  if (cmq_node = node_name) then [{cmq_node=cmq_node, cmqs=cmqs}]
  else (get_node_cmq node_name other_cmqs);

(* Given a node, give me the timers from that node *)
fun get_timers node_name [] = []
  | get_timers node_name
     ({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::other_timers) = 
  if (t_nid = node_name) then 
  {t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::(get_timers node_name other_timers)
  else 
  (get_timers node_name other_timers);


(* Have all clocks reached the clock limit? *)
fun reached_limit [] = true
  | reached_limit ({clock_node=clock_node, clock_value=clock_value, schedule=schedule}::other_node_clocks) = 
    if (clock_value &gt;= clock_limit) then 
        true andalso (reached_limit other_node_clocks)
    else false;</layout>
        </ml>
        <ml id="ID1431833033">fun pick (first::rest) = 
  let
  val i = discrete (0, (List.length (first::rest)) -1)
  in
  SOME (List.nth ((first::rest), i), List.take ((first::rest), i) ^^ List.drop ((first::rest), i+1))
  end
  | pick [] = NONE;

(* Helper to enqueue thread (back into thread priority queue) *)
fun pnq_helper {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} [] = 
                 [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}]
    | pnq_helper {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}
            ({comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op2}::queue) = 
       if (comp_prio &gt; comp_prio2) then 
               {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} :: 
              ({comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op2}::queue)
       else {comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op2}::
               (pnq_helper {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} queue);

(* Call this enqueue function when you need to return a thread back to the thread queue - non exhaustive if I cant find partition *)
fun enqueue_thread {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} 
                ({part=part, ths=ths}::rest) = 
       if (comp_part = part) then
           ({part=part, ths = (pnq_helper {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} ths)}::rest)
       else
           ({part=part, ths=ths}::(enqueue_thread {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} rest));


(* Main thread enqueue function *)
fun establish_order 
        {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, 
                  comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} 
        ({nid=nid, can_sched=can_sched, node_ths=node_ths}::other_nths) = 

    if (comp_node = nid) then 
    ({nid=nid, can_sched=can_sched, node_ths=(enqueue_thread {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} node_ths)}::other_nths)
   else 
   ({nid=nid, can_sched=can_sched, node_ths=node_ths}::(establish_order {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, 
                  comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} other_nths));
          <layout>(* Pick random thread from the list *)
fun pick (first::rest) = 
  let
  val i = discrete (0, (List.length (first::rest)) -1)
  in
  SOME (List.nth ((first::rest), i), List.take ((first::rest), i) ^^ List.drop ((first::rest), i+1))
  end
  | pick [] = NONE;

(* Helper to enqueue thread (back into thread priority queue) *)
fun pnq_helper {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} [] = 
                 [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}]
    | pnq_helper {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}
            ({comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op2}::queue) = 
       if (comp_prio &gt; comp_prio2) then 
               {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} :: 
              ({comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op2}::queue)
       else {comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op2}::
               (pnq_helper {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} queue);

(* Call this enqueue function when you need to return a thread back to the thread queue - non exhaustive if I cant find partition *)
fun enqueue_thread {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} 
                ({part=part, ths=ths}::rest) = 
       if (comp_part = part) then
           ({part=part, ths = (pnq_helper {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} ths)}::rest)
       else
           ({part=part, ths=ths}::(enqueue_thread {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} rest));


(* Main thread enqueue function *)
fun establish_order 
        {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, 
                  comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} 
        ({nid=nid, can_sched=can_sched, node_ths=node_ths}::other_nths) = 

    if (comp_node = nid) then 
    ({nid=nid, can_sched=can_sched, node_ths=(enqueue_thread {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} node_ths)}::other_nths)
   else 
   ({nid=nid, can_sched=can_sched, node_ths=node_ths}::(establish_order {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, 
                  comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} other_nths));</layout>
        </ml>
        <ml id="ID1431761073">fun get_expired_timer_ops {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
[] = []
  | get_expired_timer_ops {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
                       ({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::other_timers) = 
            if (clock_node = t_nid andalso clock_value = t_off) then 
               [t_op]^^(get_expired_timer_ops {clock_node=clock_node, clock_value=clock_value, schedule=schedule} other_timers)
           else 
           (get_expired_timer_ops {clock_node=clock_node, clock_value=clock_value, schedule=schedule} other_timers);
(* Main Timer expiry function *)
fun expire [] timers = []
  | expire (first_node_clock::other_clocks)
                timers = 
        (get_expired_timer_ops first_node_clock timers)^^(expire other_clocks timers);


(* Check if any timers have expired in node *)
fun expiry_check {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  [] = false
  | expiry_check {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
                       ({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::other_timers) = 
            if (clock_node = t_nid andalso clock_value = t_off) then 
            true
            else (expiry_check {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
                       other_timers);

(* Timer Expiry Guard *)
fun timer_guard [] timers = false
  | timer_guard (first_node_clock::other_clocks)
 timers = 

  if (reached_limit (first_node_clock::other_clocks) = false) then
  if ((expiry_check first_node_clock timers) = true) then true
  else 
  (timer_guard other_clocks timers)
  else 
      false;


(* Update Timer Offsets *)
fun update_timers clocks [] = []
  | update_timers clocks ({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::other_timers) = 
if ((timer_guard clocks [{t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}]) = true) then 
({t_nid=t_nid, t_pr=t_pr, t_off=t_off+t_pr, t_op=t_op}::(update_timers clocks other_timers))
else 
({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::(update_timers clocks other_timers));
          <layout>(* Get expired timers in node *)
fun get_expired_timer_ops {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
[] = []
  | get_expired_timer_ops {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
                       ({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::other_timers) = 
            if (clock_node = t_nid andalso clock_value = t_off) then 
               [t_op]^^(get_expired_timer_ops {clock_node=clock_node, clock_value=clock_value, schedule=schedule} other_timers)
           else 
           (get_expired_timer_ops {clock_node=clock_node, clock_value=clock_value, schedule=schedule} other_timers);
(* Main Timer expiry function *)
fun expire [] timers = []
  | expire (first_node_clock::other_clocks)
                timers = 
        (get_expired_timer_ops first_node_clock timers)^^(expire other_clocks timers);


(* Check if any timers have expired in node *)
fun expiry_check {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  [] = false
  | expiry_check {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
                       ({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::other_timers) = 
            if (clock_node = t_nid andalso clock_value = t_off) then 
            true
            else (expiry_check {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
                       other_timers);

(* Timer Expiry Guard *)
fun timer_guard [] timers = false
  | timer_guard (first_node_clock::other_clocks)
 timers = 

  if (reached_limit (first_node_clock::other_clocks) = false) then
  if ((expiry_check first_node_clock timers) = true) then true
  else 
  (timer_guard other_clocks timers)
  else 
      false;


(* Update Timer Offsets *)
fun update_timers clocks [] = []
  | update_timers clocks ({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::other_timers) = 
if ((timer_guard clocks [{t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}]) = true) then 
({t_nid=t_nid, t_pr=t_pr, t_off=t_off+t_pr, t_op=t_op}::(update_timers clocks other_timers))
else 
({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::(update_timers clocks other_timers));</layout>
        </ml>
        <ml id="ID1432150015">fun can_enqueue {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}
{clock_node=clock_node, clock_value=clock_value, schedule=[]} = 
if (op_node = clock_node) then true else false
  | can_enqueue {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}
                {clock_node=clock_node, clock_value=clock_value, 
                schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)} = 
         if (op_node=clock_node andalso op_pn=part_name) then true else false;


(* Operation Enqueue guard *)
fun enqueue_guard [] node_clock_list
                  = false
  | enqueue_guard ({opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}::other_opns) 
                    node_clock_list = 
        if (can_enqueue {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls} 
                         (hd (get_node_clock op_node node_clock_list)) 
        = true) then true
        else 
        (enqueue_guard other_opns node_clock_list);


(* Actual Enqueue *)
fun nq_this {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio,   
op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls} 
 [] = [{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv,  
op_calls=op_calls}]
  | nq_this {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, 
op_calls=op_calls} 

({opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, op_st=op_st2, op_dv=op_dv2, 
op_calls=op_calls2}::other_ops2) = 

if (op_prio &gt; op_prio2) then
({opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv,   
op_calls=op_calls}::
 {opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, op_st=op_st2, op_dv=op_dv2, op_calls=op_calls2}::other_ops2)
else 
{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, op_st=op_st2, op_dv=op_dv2, op_calls=op_calls2}::
(nq_this {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls} other_ops2 );

(* Find CMQ to enqueue on - CHECK BASE CASE What if CMQ isnt found? *)
fun find_cmq ({comp_name=comp_name, cmq=cmq}::other_ths) {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls} = 
if (comp_name = op_comp) then 
({comp_name=comp_name, cmq = (nq_this {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls} cmq)}::other_ths)
else 
{comp_name=comp_name, cmq=cmq}::(find_cmq other_ths {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls});


(* Find the right part-cmq before actual enqueue  - CHECK BASE CASE What if Partition isnt found? *)
fun find_part_cmq ({cmq_part=cmq_part, cmq_list=cmq_list}::other_part)
  {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, 
   op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv,  
   op_calls=op_calls} = 
if (cmq_part = op_pn) then 
 {cmq_part=cmq_part, cmq_list = (find_cmq cmq_list {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, 
op_calls=op_calls})}::other_part
else 
({cmq_part=cmq_part, cmq_list=cmq_list}::(find_part_cmq other_part {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}));

(* Enqueue Operation onto CMQ *)
fun opnq {clock_node=clock_node, clock_value=clock_value, 
 schedule=schedule}
 {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}
 {cmq_node=cmq_node, cmqs=cmqs} = 

 {cmq_node=cmq_node, cmqs = ( find_part_cmq cmqs {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=clock_value, op_dv=op_dv, op_calls=op_calls} )};  

(* Find the right node cmq before enqueue *)
fun find_node_cmq  node_clock_list
{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}
   ({cmq_node=cmq_node, cmqs=cmqs}::other_node_cmqs) =

if (op_node = cmq_node) then 
((opnq (hd (get_node_clock op_node node_clock_list))
  {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}
  {cmq_node=cmq_node, cmqs=cmqs})::other_node_cmqs)
else 
({cmq_node = cmq_node, cmqs=cmqs}::
(find_node_cmq node_clock_list
{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}
other_node_cmqs));


(* Main Enqueue Operation Function *)
fun enqueue_opns node_clock_list [] node_cmq_list = node_cmq_list
  | enqueue_opns node_clock_list
 (first_op::rest_opns)
 node_cmq_list = 
if (enqueue_guard [first_op] node_clock_list = true) then 
 (enqueue_opns node_clock_list rest_opns (find_node_cmq node_clock_list first_op node_cmq_list))
else 
(enqueue_opns node_clock_list rest_opns node_cmq_list);


(* Find operations that need to be removed from Waiting List *)
fun update_waiting_list node_clock_list [] node_cmq_list = []
  | update_waiting_list node_clock_list
    (first_op::rest_opns)
    node_cmq_list = 
  if (enqueue_guard [first_op] node_clock_list = true) then 
  (update_waiting_list node_clock_list rest_opns node_cmq_list)
  else 
  (first_op)::(update_waiting_list node_clock_list rest_opns node_cmq_list)
          <layout>(* Can_Enqueue - Given an operation and a node_clock - Can I enqueue this operation right now? *)
(* If schedule = [], all threads are system threads, so you can enqueue right now *)
(* If schedule &lt;&gt; [], then check if the operation&apos;s partition is active; If so, you can enqueue *)
fun can_enqueue {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}
{clock_node=clock_node, clock_value=clock_value, schedule=[]} = 
if (op_node = clock_node) then true else false
  | can_enqueue {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}
                {clock_node=clock_node, clock_value=clock_value, 
                schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)} = 
         if (op_node=clock_node andalso op_pn=part_name) then true else false;


(* Operation Enqueue guard *)
fun enqueue_guard [] node_clock_list
                  = false
  | enqueue_guard ({opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}::other_opns) 
                    node_clock_list = 
        if (can_enqueue {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls} 
                         (hd (get_node_clock op_node node_clock_list)) 
        = true) then true
        else 
        (enqueue_guard other_opns node_clock_list);


(* Actual Enqueue *)
fun nq_this {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio,   
op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls} 
 [] = [{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv,  
op_calls=op_calls}]
  | nq_this {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, 
op_calls=op_calls} 

({opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, op_st=op_st2, op_dv=op_dv2, 
op_calls=op_calls2}::other_ops2) = 

if (op_prio &gt; op_prio2) then
({opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv,   
op_calls=op_calls}::
 {opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, op_st=op_st2, op_dv=op_dv2, op_calls=op_calls2}::other_ops2)
else 
{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, op_st=op_st2, op_dv=op_dv2, op_calls=op_calls2}::
(nq_this {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls} other_ops2 );

(* Find CMQ to enqueue on - CHECK BASE CASE What if CMQ isnt found? *)
fun find_cmq ({comp_name=comp_name, cmq=cmq}::other_ths) {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls} = 
if (comp_name = op_comp) then 
({comp_name=comp_name, cmq = (nq_this {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls} cmq)}::other_ths)
else 
{comp_name=comp_name, cmq=cmq}::(find_cmq other_ths {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls});


(* Find the right part-cmq before actual enqueue  - CHECK BASE CASE What if Partition isnt found? *)
fun find_part_cmq ({cmq_part=cmq_part, cmq_list=cmq_list}::other_part)
  {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, 
   op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv,  
   op_calls=op_calls} = 
if (cmq_part = op_pn) then 
 {cmq_part=cmq_part, cmq_list = (find_cmq cmq_list {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, 
op_calls=op_calls})}::other_part
else 
({cmq_part=cmq_part, cmq_list=cmq_list}::(find_part_cmq other_part {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}));

(* Enqueue Operation onto CMQ *)
fun opnq {clock_node=clock_node, clock_value=clock_value, 
 schedule=schedule}
 {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}
 {cmq_node=cmq_node, cmqs=cmqs} = 

 {cmq_node=cmq_node, cmqs = ( find_part_cmq cmqs {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=clock_value, op_dv=op_dv, op_calls=op_calls} )};  

(* Find the right node cmq before enqueue *)
fun find_node_cmq  node_clock_list
{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}
   ({cmq_node=cmq_node, cmqs=cmqs}::other_node_cmqs) =

if (op_node = cmq_node) then 
((opnq (hd (get_node_clock op_node node_clock_list))
  {opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}
  {cmq_node=cmq_node, cmqs=cmqs})::other_node_cmqs)
else 
({cmq_node = cmq_node, cmqs=cmqs}::
(find_node_cmq node_clock_list
{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=op_calls}
other_node_cmqs));


(* Main Enqueue Operation Function *)
fun enqueue_opns node_clock_list [] node_cmq_list = node_cmq_list
  | enqueue_opns node_clock_list
 (first_op::rest_opns)
 node_cmq_list = 
if (enqueue_guard [first_op] node_clock_list = true) then 
 (enqueue_opns node_clock_list rest_opns (find_node_cmq node_clock_list first_op node_cmq_list))
else 
(enqueue_opns node_clock_list rest_opns node_cmq_list);


(* Find operations that need to be removed from Waiting List *)
fun update_waiting_list node_clock_list [] node_cmq_list = []
  | update_waiting_list node_clock_list
    (first_op::rest_opns)
    node_cmq_list = 
  if (enqueue_guard [first_op] node_clock_list = true) then 
  (update_waiting_list node_clock_list rest_opns node_cmq_list)
  else 
  (first_op)::(update_waiting_list node_clock_list rest_opns node_cmq_list)</layout>
        </ml>
        <ml id="ID1432323825">fun get_current_part {clock_node=clock_node, clock_value=clock_value, schedule=[]} = 
&quot;SYSTEM&quot;
  | get_current_part {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::rest)} =
part_name;

(* Get the CMQ_LIST for Partition X from the node-level cmqs*)
fun get_part_cmqs partition {cmq_node=cmq_node, cmqs=[]} = []
  | get_part_cmqs partition {cmq_node=cmq_node, cmqs=({cmq_part=cmq_part, cmq_list=cmq_list}::other_parts)} = 
            if (partition = cmq_part orelse cmq_part=&quot;SYSTEM&quot;) then 
            (cmq_list)^^(get_part_cmqs partition {cmq_node=cmq_node, cmqs=other_parts})
            else get_part_cmqs partition {cmq_node=cmq_node, cmqs=other_parts};

(* Are all cmqs in Partition X on Node N EMPTY? If so, return true, else return false *)
fun cmq_empty_check [] = true
  | cmq_empty_check ({comp_name=comp_name, cmq=cmq}::other_ths) = 
        if (cmq &lt;&gt; []) then false else true andalso (cmq_empty_check other_ths);

(* Are all threads in Partition X on Node N passive? If so, return true, else return false*)
fun thread_passivity_check [] = true
  | thread_passivity_check ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, 
  comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::other_ths) = 
           if (comp_op &lt;&gt; []) then false else true andalso (thread_passivity_check other_ths);

(* Get Candidate Threads for scheduling - Returns all threads in current Partition - Non exhaustive; FIX ME *)
fun get_candidates {clock_node=clock_node, clock_value=clock_value, schedule = []}
{nid=nid, can_sched=can_sched, node_ths=[{part=&quot;SYSTEM&quot;, ths=ths}]} = ths
  | get_candidates {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)}
   {nid=nid, can_sched=can_sched, node_ths=[]} = []
  | get_candidates {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)}
   {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths} = 
if (part_name = part orelse part=&quot;SYSTEM&quot;) then 
(ths)^^(get_candidates 
{clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)}
  {nid=nid, can_sched=can_sched, node_ths=other_part_ths}) 
else get_candidates {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)}
    {nid=nid, can_sched=can_sched, node_ths=other_part_ths};

(* Get list of scheduled threads on THIS node *)
fun get_scheduled_threads_this_node [] this_node = []
  | get_scheduled_threads_this_node ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
comp_st=comp_st, comp_op=comp_op}::other_ths) this_node = 

if (comp_node = this_node) then 
[{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
comp_st=comp_st, comp_op=comp_op}]^^(get_scheduled_threads_this_node other_ths this_node)
else
(get_scheduled_threads_this_node other_ths this_node);

(* Check if there is any thread schedulable in THIS node - ADD can_sched = true if still valid *)
fun check_this_node node_clock node_cmq node_ths already_scheduled_threads = 

if (already_scheduled_threads = []) then 

     if (((thread_passivity_check (get_candidates node_clock node_ths)) = false) 
     orelse 
    ((cmq_empty_check (get_part_cmqs (get_current_part node_clock) node_cmq)) = false))
    then 
    true else false

else 
false;

(* Check if there is any thread schedulable in any of the nodes *)
fun check_node_ths node_clock_list ncmq_list [] already_scheduled_threads = false
  | check_node_ths node_clock_list ncmq_list 
({nid=nid, can_sched=can_sched, node_ths=node_ths}::other_nodes) already_scheduled_threads = 

(check_this_node (hd (get_node_clock nid node_clock_list)) 
 (hd (get_node_cmq nid ncmq_list))
 {nid=nid, can_sched=can_sched, node_ths=node_ths} (get_scheduled_threads_this_node already_scheduled_threads nid))
orelse (check_node_ths node_clock_list ncmq_list other_nodes already_scheduled_threads);


(* Main Schedule Guard *)
fun schedule_guard node_clock_list
   ncmq_list
   nths_list
   timers
   opn_list
   already_scheduled_threads = 

if ((reached_limit node_clock_list = false) andalso
(timer_guard node_clock_list timers = false) andalso
(enqueue_guard opn_list node_clock_list = false) andalso
(check_node_ths node_clock_list ncmq_list nths_list already_scheduled_threads = true))

then true else false;

(* Get Thread CMQ *)
fun get_th_cmq comp ({comp_name=comp_name, cmq=cmq}::other_th) = 
     if (comp=comp_name) then cmq
     else (get_th_cmq comp other_th);

(* &quot;Schedule Thread&quot; after identifying candidates *)
fun sched_th [] {cmq_node=cmq_node, cmqs=cmqs}
{clock_node=clock_node, clock_value=clock_value, schedule=schedule} = []
  | sched_th ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
comp_st=comp_st, comp_op=comp_op}::other_ths)
  {cmq_node=cmq_node, cmqs=cmqs}
  {clock_node=clock_node, clock_value=clock_value, schedule=schedule} = 

if (comp_op &lt;&gt; []) then [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part,
 comp_prio=comp_prio, comp_st=clock_value, comp_op=comp_op}]
else 
if ((get_th_cmq comp_name (get_part_cmqs comp_part {cmq_node=cmq_node, cmqs=cmqs})) &lt;&gt; [])
then
[{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
comp_st=clock_value, comp_op=comp_op^^[hd (get_th_cmq comp_name (get_part_cmqs comp_part {cmq_node=cmq_node, cmqs=cmqs}))]}]
else
(sched_th other_ths {cmq_node=cmq_node, cmqs=cmqs} {clock_node=clock_node, clock_value=clock_value, schedule=schedule});

(* Find candidate threads and call sched_th *)
fun sched {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  {cmq_node=cmq_node, cmqs=cmqs}
  {nid=nid, can_sched=can_sched, node_ths=({part=part, ths=ths}::other_part_ths)} = 

  (sched_th (get_candidates {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  {nid=nid, can_sched=can_sched, node_ths=({part=part, ths=ths}::other_part_ths)}) 
  {cmq_node=cmq_node, cmqs=cmqs} 
  {clock_node=clock_node, clock_value=clock_value, schedule=schedule});

(* Main Schedule Function *)
fun schedule_thread node_clock_list ncmq_list [] = []
  | schedule_thread node_clock_list 
ncmq_list
({nid=nid, can_sched=can_sched, node_ths=node_ths}::other_nodes) = 
(sched (hd (get_node_clock nid node_clock_list))
  (hd (get_node_cmq nid ncmq_list))
  {nid=nid, can_sched=can_sched, node_ths=node_ths})^^
(schedule_thread node_clock_list ncmq_list other_nodes);


(* Remove the operation! *)
fun remove_cmq_opn this_comp remove_opn ({comp_name=comp_name, cmq=cmq}::other_ths) = 
         if (comp_name = this_comp) then ({comp_name=comp_name, cmq=(rm remove_opn cmq)}::other_ths)
        else {comp_name=comp_name, cmq=cmq}::(remove_cmq_opn this_comp remove_opn other_ths);

(* Find the part in which the cmq resides *)
fun update_cmq_list this_comp remove_opn {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)} 

  ({cmq_part=cmq_part, cmq_list=cmq_list}::other_part) = 

          if (part_name=cmq_part) then ({cmq_part=cmq_part, cmq_list = (remove_cmq_opn this_comp remove_opn cmq_list)}::other_part) 
          else {cmq_part=cmq_part, cmq_list=cmq_list}::(update_cmq_list this_comp remove_opn {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)} other_part);


(* Update Node CMQ after dequeuing the operation *)
fun update_node_cmq this_comp remove_opn {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  {cmq_node=cmq_node, cmqs=cmqs} =
           
[{cmq_node=cmq_node, cmqs = (update_cmq_list this_comp remove_opn {clock_node=clock_node, clock_value=clock_value, schedule=schedule} cmqs)}];

(* Main Node-specific dequeue function *)
fun dq_op {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  {cmq_node=cmq_node, cmqs=cmqs}
  {nid=nid, can_sched=can_sched, node_ths=({part=part, ths=ths}::other_part_ths)} = 

  (update_node_cmq (#comp_name (hd (sched 
  {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
    {cmq_node=cmq_node, cmqs=cmqs} 
    {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths})))   

  (hd (#comp_op (hd (sched 
  {clock_node=clock_node, clock_value=clock_value, schedule=schedule} 
   {cmq_node=cmq_node, cmqs=cmqs} 
       {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths})))) 
      {clock_node=clock_node, clock_value=clock_value, schedule=schedule} {cmq_node=cmq_node, cmqs=cmqs});

(* Main dequeue function after scheduling a thread *)
fun dequeue_opn node_clock_list
node_cmq_list
[] = []
  | dequeue_opn node_clock_list
node_cmq_list
({nid=nid, can_sched=can_sched, node_ths=node_ths}::other_nodes) = 

(dq_op (hd (get_node_clock nid node_clock_list))
   (hd (get_node_cmq nid node_cmq_list))
   {nid=nid, can_sched=can_sched, node_ths=node_ths})^^
(dequeue_opn node_clock_list node_cmq_list other_nodes);


(* Update thread list after scheduling new thread*)
fun update_ths updated_ths {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)} ({part=part2, ths=ths}::other_part_ths) = 
           if (part_name=part2) then 
              ({part=part2, ths=updated_ths}::other_part_ths)
           else 
               {part=part2, ths=ths}::(update_ths updated_ths {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)} other_part_ths);

(* Update the node-level thread list after scheduling new thread *)
fun update_ready_ths updated_ths {clock_node=clock_node, clock_value=clock_value, schedule=schedule} {nid=nid, can_sched=can_sched, node_ths=node_ths} = 
         {nid=nid, can_sched=false, node_ths = (update_ths updated_ths {clock_node=clock_node, clock_value=clock_value, schedule=schedule} node_ths)};

(* Remove scheduled thread from thread list *)
fun remove_th this_comp ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::other_ths) = 
              if (this_comp=comp_name) then other_ths else
            {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::(remove_th this_comp other_ths);

(* Main remove thread function *)
fun rm_th {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
    {cmq_node=cmq_node, cmqs=cmqs} 
    {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths} = 

 (update_ready_ths (remove_th (#comp_name (hd (sched {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
    {cmq_node=cmq_node, cmqs=cmqs} 
    {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths})))   
  (get_candidates {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
    {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths}))

    {clock_node=clock_node, clock_value=clock_value, schedule=schedule} 
    {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths})


(* Main dequeue function after scheduling a thread *)
fun remove_thread node_clock_list
node_cmq_list
[] = []
  | remove_thread node_clock_list
node_cmq_list
({nid=nid, can_sched=can_sched, node_ths=node_ths}::other_nodes) = 

(rm_th (hd (get_node_clock nid node_clock_list))
   (hd (get_node_cmq nid node_cmq_list))
   {nid=nid, can_sched=can_sched, node_ths=node_ths})::
(remove_thread node_clock_list node_cmq_list other_nodes);
          <layout>(* Get the current partition name *)
fun get_current_part {clock_node=clock_node, clock_value=clock_value, schedule=[]} = 
&quot;SYSTEM&quot;
  | get_current_part {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::rest)} =
part_name;

(* Get the CMQ_LIST for Partition X from the node-level cmqs*)
fun get_part_cmqs partition {cmq_node=cmq_node, cmqs=[]} = []
  | get_part_cmqs partition {cmq_node=cmq_node, cmqs=({cmq_part=cmq_part, cmq_list=cmq_list}::other_parts)} = 
            if (partition = cmq_part orelse cmq_part=&quot;SYSTEM&quot;) then 
            (cmq_list)^^(get_part_cmqs partition {cmq_node=cmq_node, cmqs=other_parts})
            else get_part_cmqs partition {cmq_node=cmq_node, cmqs=other_parts};

(* Are all cmqs in Partition X on Node N EMPTY? If so, return true, else return false *)
fun cmq_empty_check [] = true
  | cmq_empty_check ({comp_name=comp_name, cmq=cmq}::other_ths) = 
        if (cmq &lt;&gt; []) then false else true andalso (cmq_empty_check other_ths);

(* Are all threads in Partition X on Node N passive? If so, return true, else return false*)
fun thread_passivity_check [] = true
  | thread_passivity_check ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, 
  comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::other_ths) = 
           if (comp_op &lt;&gt; []) then false else true andalso (thread_passivity_check other_ths);

(* Get Candidate Threads for scheduling - Returns all threads in current Partition - Non exhaustive; FIX ME *)
fun get_candidates {clock_node=clock_node, clock_value=clock_value, schedule = []}
{nid=nid, can_sched=can_sched, node_ths=[{part=&quot;SYSTEM&quot;, ths=ths}]} = ths
  | get_candidates {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)}
   {nid=nid, can_sched=can_sched, node_ths=[]} = []
  | get_candidates {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)}
   {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths} = 
if (part_name = part orelse part=&quot;SYSTEM&quot;) then 
(ths)^^(get_candidates 
{clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)}
  {nid=nid, can_sched=can_sched, node_ths=other_part_ths}) 
else get_candidates {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)}
    {nid=nid, can_sched=can_sched, node_ths=other_part_ths};

(* Get list of scheduled threads on THIS node *)
fun get_scheduled_threads_this_node [] this_node = []
  | get_scheduled_threads_this_node ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
comp_st=comp_st, comp_op=comp_op}::other_ths) this_node = 

if (comp_node = this_node) then 
[{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
comp_st=comp_st, comp_op=comp_op}]^^(get_scheduled_threads_this_node other_ths this_node)
else
(get_scheduled_threads_this_node other_ths this_node);

(* Check if there is any thread schedulable in THIS node - ADD can_sched = true if still valid *)
fun check_this_node node_clock node_cmq node_ths already_scheduled_threads = 

if (already_scheduled_threads = []) then 

     if (((thread_passivity_check (get_candidates node_clock node_ths)) = false) 
     orelse 
    ((cmq_empty_check (get_part_cmqs (get_current_part node_clock) node_cmq)) = false))
    then 
    true else false

else 
false;

(* Check if there is any thread schedulable in any of the nodes *)
fun check_node_ths node_clock_list ncmq_list [] already_scheduled_threads = false
  | check_node_ths node_clock_list ncmq_list 
({nid=nid, can_sched=can_sched, node_ths=node_ths}::other_nodes) already_scheduled_threads = 

(check_this_node (hd (get_node_clock nid node_clock_list)) 
 (hd (get_node_cmq nid ncmq_list))
 {nid=nid, can_sched=can_sched, node_ths=node_ths} (get_scheduled_threads_this_node already_scheduled_threads nid))
orelse (check_node_ths node_clock_list ncmq_list other_nodes already_scheduled_threads);


(* Main Schedule Guard *)
fun schedule_guard node_clock_list
   ncmq_list
   nths_list
   timers
   opn_list
   already_scheduled_threads = 

if ((reached_limit node_clock_list = false) andalso
(timer_guard node_clock_list timers = false) andalso
(enqueue_guard opn_list node_clock_list = false) andalso
(check_node_ths node_clock_list ncmq_list nths_list already_scheduled_threads = true))

then true else false;

(* Get Thread CMQ *)
fun get_th_cmq comp ({comp_name=comp_name, cmq=cmq}::other_th) = 
     if (comp=comp_name) then cmq
     else (get_th_cmq comp other_th);

(* &quot;Schedule Thread&quot; after identifying candidates *)
fun sched_th [] {cmq_node=cmq_node, cmqs=cmqs}
{clock_node=clock_node, clock_value=clock_value, schedule=schedule} = []
  | sched_th ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
comp_st=comp_st, comp_op=comp_op}::other_ths)
  {cmq_node=cmq_node, cmqs=cmqs}
  {clock_node=clock_node, clock_value=clock_value, schedule=schedule} = 

if (comp_op &lt;&gt; []) then [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part,
 comp_prio=comp_prio, comp_st=clock_value, comp_op=comp_op}]
else 
if ((get_th_cmq comp_name (get_part_cmqs comp_part {cmq_node=cmq_node, cmqs=cmqs})) &lt;&gt; [])
then
[{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
comp_st=clock_value, comp_op=comp_op^^[hd (get_th_cmq comp_name (get_part_cmqs comp_part {cmq_node=cmq_node, cmqs=cmqs}))]}]
else
(sched_th other_ths {cmq_node=cmq_node, cmqs=cmqs} {clock_node=clock_node, clock_value=clock_value, schedule=schedule});

(* Find candidate threads and call sched_th *)
fun sched {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  {cmq_node=cmq_node, cmqs=cmqs}
  {nid=nid, can_sched=can_sched, node_ths=({part=part, ths=ths}::other_part_ths)} = 

  (sched_th (get_candidates {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  {nid=nid, can_sched=can_sched, node_ths=({part=part, ths=ths}::other_part_ths)}) 
  {cmq_node=cmq_node, cmqs=cmqs} 
  {clock_node=clock_node, clock_value=clock_value, schedule=schedule});

(* Main Schedule Function *)
fun schedule_thread node_clock_list ncmq_list [] = []
  | schedule_thread node_clock_list 
ncmq_list
({nid=nid, can_sched=can_sched, node_ths=node_ths}::other_nodes) = 
(sched (hd (get_node_clock nid node_clock_list))
  (hd (get_node_cmq nid ncmq_list))
  {nid=nid, can_sched=can_sched, node_ths=node_ths})^^
(schedule_thread node_clock_list ncmq_list other_nodes);


(* Remove the operation! *)
fun remove_cmq_opn this_comp remove_opn ({comp_name=comp_name, cmq=cmq}::other_ths) = 
         if (comp_name = this_comp) then ({comp_name=comp_name, cmq=(rm remove_opn cmq)}::other_ths)
        else {comp_name=comp_name, cmq=cmq}::(remove_cmq_opn this_comp remove_opn other_ths);

(* Find the part in which the cmq resides *)
fun update_cmq_list this_comp remove_opn {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)} 

  ({cmq_part=cmq_part, cmq_list=cmq_list}::other_part) = 

          if (part_name=cmq_part) then ({cmq_part=cmq_part, cmq_list = (remove_cmq_opn this_comp remove_opn cmq_list)}::other_part) 
          else {cmq_part=cmq_part, cmq_list=cmq_list}::(update_cmq_list this_comp remove_opn {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)} other_part);


(* Update Node CMQ after dequeuing the operation *)
fun update_node_cmq this_comp remove_opn {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  {cmq_node=cmq_node, cmqs=cmqs} =
           
[{cmq_node=cmq_node, cmqs = (update_cmq_list this_comp remove_opn {clock_node=clock_node, clock_value=clock_value, schedule=schedule} cmqs)}];

(* Main Node-specific dequeue function *)
fun dq_op {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  {cmq_node=cmq_node, cmqs=cmqs}
  {nid=nid, can_sched=can_sched, node_ths=({part=part, ths=ths}::other_part_ths)} = 

  (update_node_cmq (#comp_name (hd (sched 
  {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
    {cmq_node=cmq_node, cmqs=cmqs} 
    {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths})))   

  (hd (#comp_op (hd (sched 
  {clock_node=clock_node, clock_value=clock_value, schedule=schedule} 
   {cmq_node=cmq_node, cmqs=cmqs} 
       {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths})))) 
      {clock_node=clock_node, clock_value=clock_value, schedule=schedule} {cmq_node=cmq_node, cmqs=cmqs});

(* Main dequeue function after scheduling a thread *)
fun dequeue_opn node_clock_list
node_cmq_list
[] = []
  | dequeue_opn node_clock_list
node_cmq_list
({nid=nid, can_sched=can_sched, node_ths=node_ths}::other_nodes) = 

(dq_op (hd (get_node_clock nid node_clock_list))
   (hd (get_node_cmq nid node_cmq_list))
   {nid=nid, can_sched=can_sched, node_ths=node_ths})^^
(dequeue_opn node_clock_list node_cmq_list other_nodes);


(* Update thread list after scheduling new thread*)
fun update_ths updated_ths {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)} ({part=part2, ths=ths}::other_part_ths) = 
           if (part_name=part2) then 
              ({part=part2, ths=updated_ths}::other_part_ths)
           else 
               {part=part2, ths=ths}::(update_ths updated_ths {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::other_pns)} other_part_ths);

(* Update the node-level thread list after scheduling new thread *)
fun update_ready_ths updated_ths {clock_node=clock_node, clock_value=clock_value, schedule=schedule} {nid=nid, can_sched=can_sched, node_ths=node_ths} = 
         {nid=nid, can_sched=false, node_ths = (update_ths updated_ths {clock_node=clock_node, clock_value=clock_value, schedule=schedule} node_ths)};

(* Remove scheduled thread from thread list *)
fun remove_th this_comp ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::other_ths) = 
              if (this_comp=comp_name) then other_ths else
            {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::(remove_th this_comp other_ths);

(* Main remove thread function *)
fun rm_th {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
    {cmq_node=cmq_node, cmqs=cmqs} 
    {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths} = 

 (update_ready_ths (remove_th (#comp_name (hd (sched {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
    {cmq_node=cmq_node, cmqs=cmqs} 
    {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths})))   
  (get_candidates {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
    {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths}))

    {clock_node=clock_node, clock_value=clock_value, schedule=schedule} 
    {nid=nid, can_sched=can_sched, node_ths={part=part, ths=ths}::other_part_ths})


(* Main dequeue function after scheduling a thread *)
fun remove_thread node_clock_list
node_cmq_list
[] = []
  | remove_thread node_clock_list
node_cmq_list
({nid=nid, can_sched=can_sched, node_ths=node_ths}::other_nodes) = 

(rm_th (hd (get_node_clock nid node_clock_list))
   (hd (get_node_cmq nid node_cmq_list))
   {nid=nid, can_sched=can_sched, node_ths=node_ths})::
(remove_thread node_clock_list node_cmq_list other_nodes);</layout>
        </ml>
        <ml id="ID1433622370">fun find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st,
   op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name1, unblk_list=unblk_list,  induced=induced,  call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}
    [] = []
  | find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[]}
 ({node_name=this_node, port_name=this_port, opn=opn}::other_opns) = []
  | find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, 
  comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=[]}]}
 ({node_name=this_node, port_name=this_port, opn=opn}::other_opns) = []
  | find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st,
   op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name1, unblk_list=unblk_list,  induced=induced,  call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}
   ({node_name=this_node, port_name=this_port, opn=opn}::other_opns) = 

  if (comp_node = this_node andalso port_name1 = this_port andalso (port_type = &quot;RMI_Receptacle&quot; orelse port_type = &quot;AMI_Receptacle&quot; orelse port_type = &quot;Facet&quot;) andalso (induced = false)) then 
  (opn)::(find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio,
   op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name1, unblk_list=unblk_list,  induced=induced,  call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} 
  other_opns)
  else 
  if ((port_type = &quot;Publisher&quot;) andalso ((comp_node = this_node) orelse (this_node = &quot;ALL&quot;)) 
  andalso (port_name1=this_port) andalso (call_exec_t = call_dur) andalso (induced = false)) then
  (opn)::(find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio,
   op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name1, unblk_list=unblk_list,  induced=induced,  call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} 
  other_opns)
  else
  (find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio,
   op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name1, unblk_list=unblk_list,  induced=induced,  call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} 
  other_opns)



(* Main Induction Guard *)
fun induce_opns running_threads [] = []
  | induce_opns [] ({node_name=this_node, port_name=this_port, opn=opn}::other_opns) = []
  | induce_opns ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=comp_op}::other_threads)

 ({node_name=this_node, port_name=this_port, opn=opn}::other_opns) = 

(find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
   comp_st=comp_st, comp_op=comp_op}
  ({node_name=this_node, port_name=this_port, opn=opn}::other_opns))^^
(induce_opns other_threads ({node_name=this_node, port_name=this_port, opn=opn}::other_opns));
          <layout>(* Find Induce Operations *)
fun find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st,
   op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name1, unblk_list=unblk_list,  induced=induced,  call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}
    [] = []
  | find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[]}
 ({node_name=this_node, port_name=this_port, opn=opn}::other_opns) = []
  | find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, 
  comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=[]}]}
 ({node_name=this_node, port_name=this_port, opn=opn}::other_opns) = []
  | find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st,
   op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name1, unblk_list=unblk_list,  induced=induced,  call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}
   ({node_name=this_node, port_name=this_port, opn=opn}::other_opns) = 

  if (comp_node = this_node andalso port_name1 = this_port andalso (port_type = &quot;RMI_Receptacle&quot; orelse port_type = &quot;AMI_Receptacle&quot; orelse port_type = &quot;Facet&quot;) andalso (induced = false)) then 
  (opn)::(find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio,
   op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name1, unblk_list=unblk_list,  induced=induced,  call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} 
  other_opns)
  else 
  if ((port_type = &quot;Publisher&quot;) andalso ((comp_node = this_node) orelse (this_node = &quot;ALL&quot;)) 
  andalso (port_name1=this_port) andalso (call_exec_t = call_dur) andalso (induced = false)) then
  (opn)::(find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio,
   op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name1, unblk_list=unblk_list,  induced=induced,  call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} 
  other_opns)
  else
  (find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio,
   op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name1, unblk_list=unblk_list,  induced=induced,  call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} 
  other_opns)



(* Main Induction Guard *)
fun induce_opns running_threads [] = []
  | induce_opns [] ({node_name=this_node, port_name=this_port, opn=opn}::other_opns) = []
  | induce_opns ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=comp_op}::other_threads)

 ({node_name=this_node, port_name=this_port, opn=opn}::other_opns) = 

(find_induce_opns {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
   comp_st=comp_st, comp_op=comp_op}
  ({node_name=this_node, port_name=this_port, opn=opn}::other_opns))^^
(induce_opns other_threads ({node_name=this_node, port_name=this_port, opn=opn}::other_opns));</layout>
        </ml>
        <ml id="ID1434172356">fun block_threads [] = []
  | block_threads 
         ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_threads) = 

 if (port_type = &quot;RMI_Receptacle&quot; andalso call_exec_t = call_dur) then 
           [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}]
 ^^(block_threads other_threads)
 else 
 (block_threads other_threads);
          <layout>(* Main thread blocking function *)
fun block_threads [] = []
  | block_threads 
         ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_threads) = 

 if (port_type = &quot;RMI_Receptacle&quot; andalso call_exec_t = call_dur) then 
           [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}]
 ^^(block_threads other_threads)
 else 
 (block_threads other_threads);</layout>
        </ml>
        <ml id="ID1432724252">fun can_run {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
    {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[]} = false
  | can_run {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
    {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=[]}]} = false
  | can_run {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} = 
  if ((clock_value - comp_st &lt; clock_tick) andalso 
  (call_exec_t &lt;= call_dur)) then true 
  else false; 

(* Can the any one running thread &quot;execute&quot; - is there anything TO execute; is the call complete?; is the op complete? - check all*)
fun can_execute_ths node_clock_list [] = false
  | can_execute_ths node_clock_list 
   ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::other_threads) = 
(can_run (hd(get_node_clock comp_node node_clock_list)) 
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op})
 orelse (can_execute_ths node_clock_list other_threads);

(* Main Execute Guard *)
fun execute_guard node_clock_list
  node_ths_list
  running_threads
  timers
  opn_list = 

if ((reached_limit node_clock_list = false) andalso
(timer_guard node_clock_list timers = false) andalso
(enqueue_guard opn_list node_clock_list = false) andalso
(can_execute_ths node_clock_list running_threads) = true) then true else false;

(*------------------------------------------------------------------------------------------------------*)

(* Mindless partition switch - No checks *)
fun switch_partition [] = []
  | switch_partition [{part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}] =
   [{part_name=part_name, exec_t=0, dur=dur, pr=pr, off=off+pr}]
  | switch_partition ({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::rest) = 
  (rest^^[{part_name=part_name, exec_t=0, dur=dur, pr=pr, off=off+pr}]);

(* Progress Clock by x amount of time *)
fun progress_clock x {clock_node=clock_node, clock_value=clock_value, schedule=schedule} = 
  {clock_node=clock_node, clock_value=(clock_value+x), schedule=schedule};

(* Progress Schedule by x amount of time *)
fun progress_schedule x {clock_node=clock_node, clock_value=clock_value, schedule=[]} = 
{clock_node=clock_node, clock_value=clock_value, schedule=[]}
  | progress_schedule x {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::rest)} = 
if (exec_t + x &lt; dur) then
{clock_node=clock_node, clock_value=clock_value, 
schedule=({part_name=part_name, exec_t = exec_t + x, dur=dur, pr=pr, off=off}::rest)}
else 
(progress_schedule (x - (dur - exec_t))
{clock_node=clock_node, clock_value=clock_value, 
   schedule=(switch_partition ({part_name=part_name, exec_t = exec_t + x, dur=dur, pr=pr, off=off}::rest))});

(* Update Node Clock - Progress clock value and partition exec_t time by x *)
fun update_node_clock x {clock_node=clock_node, clock_value=clock_value, schedule=schedule} = 
 (progress_schedule x 
 (progress_clock x 
       {clock_node=clock_node, clock_value=clock_value, schedule=schedule}));

(* Progress node clock by this_much on this_node *)
fun progress_clock [] node_name progress_time = [] 
  | progress_clock ({clock_node=clock_node, clock_value=clock_value, schedule=schedule}::other_node_clocks) node_name progress_time = 
  if (node_name = clock_node) then 
  (update_node_clock progress_time {clock_node=clock_node, clock_value=clock_value, schedule=schedule})::other_node_clocks
  else 
  {clock_node=clock_node, clock_value=clock_value, schedule=schedule}::(progress_clock other_node_clocks node_name progress_time);

(* Given a running thraed, find out the call_exec_t of the currently executing call *)
fun get_call_exec_t {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[]} = 0
  | get_call_exec_t {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=[]}]}
 = 0
  | get_call_exec_t {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} = 
 call_exec_t;

(* Check thread exec_t - has thread run for a clock tick? - the min time assigned to it when it was scheduled *)
fun preempt_guard {clock_node=clock_node, clock_value=clock_value, schedule=schedule} 
  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} =
    (clock_value - comp_st = clock_tick);



(* Remove operation if completed - Remove call if completed - Remove anything needed *)
fun handle_opn {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} = 

(* Case 0: RMI call - return [] because thread gets moved to blocked thread list *)
if (port_type = &quot;RMI_Receptacle&quot; andalso call_dur = call_exec_t) then 
[]
else
 (* Case 1: Whole Operation is completed *)
 if (call_exec_t = call_dur andalso other_calls = []) then 
 [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[]}]
 else 
  (* Case 2: Call is complete but operation is not *)
  if (call_exec_t = call_dur) then 
  [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=other_calls}]}]
  (* Case 3: Neither is complete - Leave thread as is *)
  else 
  [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}];

(* Handle Preempt_Thread *)
fun handle_preempt node_clock_list [] = []
  | handle_preempt node_clock_list
[{comp_node=comp_node, comp_name=comp_name, 
comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}] = 

if (preempt_guard (hd (get_node_clock comp_node node_clock_list))
                {comp_node=comp_node, comp_name=comp_name, 
comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} = true ) 
then
[]
else 
[{comp_node=comp_node, comp_name=comp_name, 
comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}];

(* No timer expiry WITHIN THE NEXT CLOCK TICK *)
fun no_timer_expiry_this_node clock_value node_name [] = true 
  | no_timer_expiry_this_node clock_value node_name ({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::other_timers) = 
if ((t_nid = node_name) andalso (t_off &lt; clock_value + clock_tick)) then false
else true andalso (no_timer_expiry_this_node clock_value node_name other_timers);

fun next_timer_offset [{t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}] = t_off
  |  next_timer_offset ({t_nid=t_nid1, t_pr=t_pr1, t_off=t_off1, t_op=t_op1}::{t_nid=t_nid2, t_pr=t_pr2, t_off=t_off2, t_op=t_op2}::rest) = 
           if (t_off1 &lt;= t_off2) then 
                   next_timer_offset ({t_nid=t_nid1, t_pr=t_pr1, t_off=t_off1, t_op=t_op1}::rest)
           else 
                   (next_timer_offset ({t_nid=t_nid2, t_pr=t_pr2, t_off=t_off2, t_op=t_op2}::rest));

(* Find the next immediate timer offset *)
fun when_is_next_timer clock_value node_name timers = 
((next_timer_offset (get_timers node_name timers)) - clock_value);

(* Return Minimum of two values *)
fun find_min value1 value2 = 
      if (value1 &lt; value2) then value1
      else 
         if (value2 &gt; value1) then value2
         else value1;

(* Handle Local call - Piece of code *)
(* Decide by how much you can progress time *)
(* (1) To next timer, (2) To completion of the call, (3) To next preempt point *)
fun handle_code {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
 timers 
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} = 

(* Call just started - Call will NOT end within 1 clock tick - no timer expiry on this node within the next clock tick - then just push time forward *)
if ((call_exec_t + clock_tick &lt;= call_dur) andalso (no_timer_expiry_this_node clock_value comp_node timers =  true)) then
if (call_exec_t + clock_tick &lt; call_dur) then 
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t+(clock_tick-(clock_value-comp_st)), call_dur=call_dur}::other_calls)}]} 
else 
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t+clock_tick, call_dur=call_dur}::other_calls)}]} 
(* If one of the above conditions is false... *)
else 
(* Call will end before the next clock tick and there are no timers to worry about *)
if ((call_exec_t + clock_tick &gt; call_dur) andalso (no_timer_expiry_this_node clock_value comp_node timers =  true)) then
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t+(call_dur-call_exec_t), call_dur=call_dur}::other_calls)}]}
else
(* Call will end before the next clock tick and there ARE timers to worry about *)
if ((call_exec_t + clock_tick &gt; call_dur) andalso (no_timer_expiry_this_node clock_value comp_node timers =  false)) then 
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t+(find_min (call_dur-call_exec_t) (when_is_next_timer clock_value comp_node timers)), call_dur=call_dur}::other_calls)}]}
(* Call WILL NOT end before next clock tick AND THERE ARE timers to worry about - just jump to next timer offset so the timers can fire *)
else
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t+(when_is_next_timer clock_value comp_node timers), call_dur=call_dur}::other_calls)}]};

(* Handle Interaction - Since q_t and pr_t are removed, the interaction does not take up time - Only purpose is to induce operations - So return the thread as is *)
fun handle_interaction {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} = 
 {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]};


(* Execute one thread - Make the choice - How to progress the time for this thread execution *)
fun exec {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
 timers 
 {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} = 

case port_type of &quot;Local&quot; =&gt; (handle_code {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  timers 
  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]})
 | &quot;RMI_Receptacle&quot; =&gt; (handle_interaction  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]})
 | &quot;AMI_Receptacle&quot; =&gt; (handle_interaction  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]})
 | &quot;Facet&quot; =&gt; (handle_interaction  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]})
 | &quot;Publisher&quot; =&gt; (handle_interaction  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]})
 | &quot;Subscriber&quot; =&gt; (handle_interaction  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]});

fun update_clocks node_clock_list timers [] = node_clock_list
  | update_clocks   node_clock_list
timers
({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=comp_op}::other_threads) = 

 (update_clocks 
 (progress_clock node_clock_list comp_node
 ( (get_call_exec_t   (exec (hd (get_node_clock comp_node node_clock_list)) 
  timers   
 {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
       comp_st=comp_st, comp_op=comp_op}
      )
    ) 
 - (get_call_exec_t {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=comp_op}))
 )

 timers
 other_threads);


(* Main execute thread function - Run exec on all running threads *)
fun execute_thread node_clock_list timers [] = []
  | execute_thread node_clock_list
     timers
   ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::other_threads) = 
(handle_preempt 
  (update_clocks node_clock_list timers
  ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::other_threads)) 
  (handle_opn (exec (hd (get_node_clock comp_node node_clock_list))
        timers
    {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op})))^^
(execute_thread node_clock_list timers other_threads);

(* Enqueue a list of threads back into the node_ths_list - Basically call establish_order for all threads *)
fun enqueue_thread_list []
nths_list = nths_list
  | enqueue_thread_list (thread::thread_list)
 nths_list = 

(enqueue_thread_list thread_list 
(establish_order thread nths_list));

(* Main preempt guard *)
fun get_all_preempt_threads node_clock_list original_nc timers [] = []
  | get_all_preempt_threads 
                  node_clock_list
                  original_nc
                  timers
  ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::other_threads) = 

if (preempt_guard (hd (get_node_clock comp_node node_clock_list))  
  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} = true) then 
(handle_opn (exec (hd (get_node_clock comp_node original_nc)) 
timers
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}))
^^(get_all_preempt_threads node_clock_list original_nc timers other_threads)
else 
  (get_all_preempt_threads node_clock_list original_nc timers other_threads);

(* Main Preempt thread function *)
fun preempt_threads nths_list
running_threads
node_clock_list
timers = 
(enqueue_thread_list (get_all_preempt_threads 
(update_clocks node_clock_list timers running_threads) 
node_clock_list
timers
running_threads) nths_list);




(* Main guard to jump time to either the next timer or next partition *)
(* This is the lowest priority transition - so literally every other guard should fail *)
fun jump_time_guard node_clock_list
node_ths_list
node_cmq_list
running_ths
timers
waiting_opns = 

if (  (reached_limit node_clock_list = false) andalso
  (timer_guard node_clock_list timers = false) andalso
  (enqueue_guard waiting_opns node_clock_list = false) andalso
  (schedule_guard node_clock_list node_cmq_list node_ths_list timers waiting_opns running_ths = false) andalso
  (execute_guard node_clock_list node_ths_list running_ths timers waiting_opns = false )) then true else false;


(* No timer expiry before the next partition *)
fun no_timer_expiry_this_partition 
                      {clock_node=clock_node, clock_value=clock_value, schedule=[]}
   timers = false
  | no_timer_expiry_this_partition 
              {clock_node=clock_node, clock_value=clock_value, 
              schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)} 
     [] = true 

  | no_timer_expiry_this_partition 
              {clock_node=clock_node, clock_value=clock_value, 
              schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)} 
  ({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::other_timers) = 

  if ((t_nid = clock_node) andalso (t_off &lt; (clock_value + (dur-exec_t)))) then 
  false
  else 
  (true andalso (no_timer_expiry_this_partition
  {clock_node=clock_node, clock_value=clock_value, 
              schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)}
                 other_timers));

(* Jump time on each node and return updated node_clock *)
fun jump_time_this_node timers 
{clock_node=clock_node, clock_value=clock_value, schedule=[]} = 
(update_node_clock (when_is_next_timer clock_value clock_node timers)
{clock_node=clock_node, clock_value=clock_value, schedule=[]})
  | jump_time_this_node timers 
{clock_node=clock_node, clock_value=clock_value, 
 schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)} = 
if (no_timer_expiry_this_partition
{clock_node=clock_node, clock_value=clock_value, 
   schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)}
timers = true) then 
(update_node_clock (dur-exec_t) 
{clock_node=clock_node, clock_value=clock_value, 
    schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)})
(* Find and jump to next timer *)
else 
    (update_node_clock (when_is_next_timer clock_value clock_node timers)
    {clock_node=clock_node, clock_value=clock_value, 
    schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)});

(* Main jump time function *)
(* HUGE Assumption here - Assuming no inter-node interactions *)
(* Therefore, treating each node as independent of the rest *)
(* So, decision behind jumping the clock on one node does not depend on state of any other node *)
fun jump_time timers [] = []
  | jump_time timers
  ({clock_node=clock_node, clock_value=clock_value, schedule=schedule}::other_node_clocks) =

(jump_time_this_node timers {clock_node=clock_node, clock_value=clock_value, schedule=schedule})
::(jump_time timers other_node_clocks);


(* Accumulate a list of threads that CAN be unblocked right now *)
fun find_ths_to_unblock [] 
    {comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
  comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op2}
                        = []

  | find_ths_to_unblock ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_blked_threads)

 {comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
    comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[]} = 

         []

  | find_ths_to_unblock ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_blked_threads)

{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=[]}]} = 

         []

  | find_ths_to_unblock ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_blked_threads)

{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=({port_type=port_type2, port_name=port_name2, unblk_list=unblk_list2, induced=induced2, call_st=call_st2, call_et=call_et2, call_exec_t=call_exec_t2, call_dur=call_dur2}::other_calls2)}]} = 

 if ((other_calls2 = []) andalso (contains unblk_list2 [{node_name=comp_node,
  comp_name=comp_name, port_name=port_name}]) = true 
  andalso (call_exec_t2  = call_dur2)) then 

 [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=other_calls}]}]
 
^^(find_ths_to_unblock other_blked_threads 
{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=({port_type=port_type2, port_name=port_name2, unblk_list=unblk_list2, induced=induced2, call_st=call_st2, call_et=call_et2, call_exec_t=call_exec_t2, call_dur=call_dur2}::other_calls2)}]})

 else 
 (find_ths_to_unblock other_blked_threads 
{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=({port_type=port_type2, port_name=port_name2, unblk_list=unblk_list2, induced=induced2, call_st=call_st2, call_et=call_et2, call_exec_t=call_exec_t2, call_dur=call_dur2}::other_calls2)}]});


(* Accumulate a list of threads that CAN be removed right now from blocked threads list *)
fun find_ths_to_remove [] 
    {comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
  comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op2}
                        = []

  | find_ths_to_remove ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_blked_threads)

 {comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
    comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[]} = 

         []

  | find_ths_to_remove ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_blked_threads)

{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=[]}]} = 

         []

  | find_ths_to_remove ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_blked_threads)

{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=({port_type=port_type2, port_name=port_name2, unblk_list=unblk_list2, induced=induced2, call_st=call_st2, call_et=call_et2, call_exec_t=call_exec_t2, call_dur=call_dur2}::other_calls2)}]} = 

 if ((other_calls2 = []) andalso (contains unblk_list2 [{node_name=comp_node,
  comp_name=comp_name, port_name=port_name}]) = true 
  andalso (call_exec_t2  = call_dur2)) then 

 [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}]
 
^^(find_ths_to_remove other_blked_threads 
{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=({port_type=port_type2, port_name=port_name2, unblk_list=unblk_list2, induced=induced2, call_st=call_st2, call_et=call_et2, call_exec_t=call_exec_t2, call_dur=call_dur2}::other_calls2)}]})

 else 
 (find_ths_to_remove other_blked_threads 
{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=({port_type=port_type2, port_name=port_name2, unblk_list=unblk_list2, induced=induced2, call_st=call_st2, call_et=call_et2, call_exec_t=call_exec_t2, call_dur=call_dur2}::other_calls2)}]});


(* Find all threads to be removed *)
fun find_all_removed_threads all_blocked_threads node_clock_list timers
 [] = []
  | find_all_removed_threads all_blocked_threads node_clock_list timers
 ({comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
  comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op}::other_threads) = 
(find_ths_to_remove all_blocked_threads 
(exec   (hd (get_node_clock comp_node2 node_clock_list))  timers  
{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
              comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op}) )
^^(find_all_removed_threads all_blocked_threads node_clock_list timers other_threads);



(* Iterate through all running threads and chcek and fine threads to unblock *)
fun find_all_unblked_threads all_blocked_threads node_clock_list timers
 [] = []
  | find_all_unblked_threads all_blocked_threads node_clock_list timers
 ({comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
  comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op}::other_threads) = 
(find_ths_to_unblock all_blocked_threads 
(exec   (hd (get_node_clock comp_node2 node_clock_list))  timers  
{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
              comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op}) )
^^(find_all_unblked_threads all_blocked_threads node_clock_list timers other_threads);

(* Main Unblock thread function *)
fun unblock_threads nths_list
node_clock_list
timers
running_threads
all_blocked_threads = 
(enqueue_thread_list (find_all_unblked_threads all_blocked_threads node_clock_list timers running_threads) nths_list);


(* Remove threads from list *)
fun remove_these_threads blocked_threads
 [] = blocked_threads
  | remove_these_threads blocked_threads
 (thread::other_unblocked_threads) = 
(remove_these_threads (rm thread blocked_threads) other_unblocked_threads);

(* Update Blocked Threads - MAIN *)
fun update_blocked_threads running_threads
   node_clock_list
   timers
   all_blocked_threads = 
(remove_these_threads all_blocked_threads
(find_all_removed_threads all_blocked_threads node_clock_list timers running_threads));
          <layout>(* Can THIS thread run? *)
fun can_run {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
    {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[]} = false
  | can_run {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
    {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=[]}]} = false
  | can_run {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} = 
  if ((clock_value - comp_st &lt; clock_tick) andalso 
  (call_exec_t &lt;= call_dur)) then true 
  else false; 

(* Can the any one running thread &quot;execute&quot; - is there anything TO execute; is the call complete?; is the op complete? - check all*)
fun can_execute_ths node_clock_list [] = false
  | can_execute_ths node_clock_list 
   ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::other_threads) = 
(can_run (hd(get_node_clock comp_node node_clock_list)) 
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op})
 orelse (can_execute_ths node_clock_list other_threads);

(* Main Execute Guard *)
fun execute_guard node_clock_list
  node_ths_list
  running_threads
  timers
  opn_list = 

if ((reached_limit node_clock_list = false) andalso
(timer_guard node_clock_list timers = false) andalso
(enqueue_guard opn_list node_clock_list = false) andalso
(can_execute_ths node_clock_list running_threads) = true) then true else false;

(*------------------------------------------------------------------------------------------------------*)

(* Mindless partition switch - No checks *)
fun switch_partition [] = []
  | switch_partition [{part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}] =
   [{part_name=part_name, exec_t=0, dur=dur, pr=pr, off=off+pr}]
  | switch_partition ({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::rest) = 
  (rest^^[{part_name=part_name, exec_t=0, dur=dur, pr=pr, off=off+pr}]);

(* Progress Clock by x amount of time *)
fun progress_clock x {clock_node=clock_node, clock_value=clock_value, schedule=schedule} = 
  {clock_node=clock_node, clock_value=(clock_value+x), schedule=schedule};

(* Progress Schedule by x amount of time *)
fun progress_schedule x {clock_node=clock_node, clock_value=clock_value, schedule=[]} = 
{clock_node=clock_node, clock_value=clock_value, schedule=[]}
  | progress_schedule x {clock_node=clock_node, clock_value=clock_value, 
  schedule=({part_name=part_name, exec_t=exec_t, dur=dur, pr=pr, off=off}::rest)} = 
if (exec_t + x &lt; dur) then
{clock_node=clock_node, clock_value=clock_value, 
schedule=({part_name=part_name, exec_t = exec_t + x, dur=dur, pr=pr, off=off}::rest)}
else 
(progress_schedule (x - (dur - exec_t))
{clock_node=clock_node, clock_value=clock_value, 
   schedule=(switch_partition ({part_name=part_name, exec_t = exec_t + x, dur=dur, pr=pr, off=off}::rest))});

(* Update Node Clock - Progress clock value and partition exec_t time by x *)
fun update_node_clock x {clock_node=clock_node, clock_value=clock_value, schedule=schedule} = 
 (progress_schedule x 
 (progress_clock x 
       {clock_node=clock_node, clock_value=clock_value, schedule=schedule}));

(* Progress node clock by this_much on this_node *)
fun progress_clock [] node_name progress_time = [] 
  | progress_clock ({clock_node=clock_node, clock_value=clock_value, schedule=schedule}::other_node_clocks) node_name progress_time = 
  if (node_name = clock_node) then 
  (update_node_clock progress_time {clock_node=clock_node, clock_value=clock_value, schedule=schedule})::other_node_clocks
  else 
  {clock_node=clock_node, clock_value=clock_value, schedule=schedule}::(progress_clock other_node_clocks node_name progress_time);

(* Given a running thraed, find out the call_exec_t of the currently executing call *)
fun get_call_exec_t {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[]} = 0
  | get_call_exec_t {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=[]}]}
 = 0
  | get_call_exec_t {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} = 
 call_exec_t;

(* Check thread exec_t - has thread run for a clock tick? - the min time assigned to it when it was scheduled *)
fun preempt_guard {clock_node=clock_node, clock_value=clock_value, schedule=schedule} 
  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} =
    (clock_value - comp_st = clock_tick);



(* Remove operation if completed - Remove call if completed - Remove anything needed *)
fun handle_opn {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} = 

(* Case 0: RMI call - return [] because thread gets moved to blocked thread list *)
if (port_type = &quot;RMI_Receptacle&quot; andalso call_dur = call_exec_t) then 
[]
else
 (* Case 1: Whole Operation is completed *)
 if (call_exec_t = call_dur andalso other_calls = []) then 
 [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[]}]
 else 
  (* Case 2: Call is complete but operation is not *)
  if (call_exec_t = call_dur) then 
  [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=other_calls}]}]
  (* Case 3: Neither is complete - Leave thread as is *)
  else 
  [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}];

(* Handle Preempt_Thread *)
fun handle_preempt node_clock_list [] = []
  | handle_preempt node_clock_list
[{comp_node=comp_node, comp_name=comp_name, 
comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}] = 

if (preempt_guard (hd (get_node_clock comp_node node_clock_list))
                {comp_node=comp_node, comp_name=comp_name, 
comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} = true ) 
then
[]
else 
[{comp_node=comp_node, comp_name=comp_name, 
comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}];

(* No timer expiry WITHIN THE NEXT CLOCK TICK *)
fun no_timer_expiry_this_node clock_value node_name [] = true 
  | no_timer_expiry_this_node clock_value node_name ({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::other_timers) = 
if ((t_nid = node_name) andalso (t_off &lt; clock_value + clock_tick)) then false
else true andalso (no_timer_expiry_this_node clock_value node_name other_timers);

fun next_timer_offset [{t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}] = t_off
  |  next_timer_offset ({t_nid=t_nid1, t_pr=t_pr1, t_off=t_off1, t_op=t_op1}::{t_nid=t_nid2, t_pr=t_pr2, t_off=t_off2, t_op=t_op2}::rest) = 
           if (t_off1 &lt;= t_off2) then 
                   next_timer_offset ({t_nid=t_nid1, t_pr=t_pr1, t_off=t_off1, t_op=t_op1}::rest)
           else 
                   (next_timer_offset ({t_nid=t_nid2, t_pr=t_pr2, t_off=t_off2, t_op=t_op2}::rest));

(* Find the next immediate timer offset *)
fun when_is_next_timer clock_value node_name timers = 
((next_timer_offset (get_timers node_name timers)) - clock_value);

(* Return Minimum of two values *)
fun find_min value1 value2 = 
      if (value1 &lt; value2) then value1
      else 
         if (value2 &gt; value1) then value2
         else value1;

(* Handle Local call - Piece of code *)
(* Decide by how much you can progress time *)
(* (1) To next timer, (2) To completion of the call, (3) To next preempt point *)
fun handle_code {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
 timers 
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} = 

(* Call just started - Call will NOT end within 1 clock tick - no timer expiry on this node within the next clock tick - then just push time forward *)
if ((call_exec_t + clock_tick &lt;= call_dur) andalso (no_timer_expiry_this_node clock_value comp_node timers =  true)) then
if (call_exec_t + clock_tick &lt; call_dur) then 
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t+(clock_tick-(clock_value-comp_st)), call_dur=call_dur}::other_calls)}]} 
else 
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t+clock_tick, call_dur=call_dur}::other_calls)}]} 
(* If one of the above conditions is false... *)
else 
(* Call will end before the next clock tick and there are no timers to worry about *)
if ((call_exec_t + clock_tick &gt; call_dur) andalso (no_timer_expiry_this_node clock_value comp_node timers =  true)) then
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t+(call_dur-call_exec_t), call_dur=call_dur}::other_calls)}]}
else
(* Call will end before the next clock tick and there ARE timers to worry about *)
if ((call_exec_t + clock_tick &gt; call_dur) andalso (no_timer_expiry_this_node clock_value comp_node timers =  false)) then 
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t+(find_min (call_dur-call_exec_t) (when_is_next_timer clock_value comp_node timers)), call_dur=call_dur}::other_calls)}]}
(* Call WILL NOT end before next clock tick AND THERE ARE timers to worry about - just jump to next timer offset so the timers can fire *)
else
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t+(when_is_next_timer clock_value comp_node timers), call_dur=call_dur}::other_calls)}]};

(* Handle Interaction - Since q_t and pr_t are removed, the interaction does not take up time - Only purpose is to induce operations - So return the thread as is *)
fun handle_interaction {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} = 
 {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]};


(* Execute one thread - Make the choice - How to progress the time for this thread execution *)
fun exec {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
 timers 
 {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]} = 

case port_type of &quot;Local&quot; =&gt; (handle_code {clock_node=clock_node, clock_value=clock_value, schedule=schedule}
  timers 
  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]})
 | &quot;RMI_Receptacle&quot; =&gt; (handle_interaction  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]})
 | &quot;AMI_Receptacle&quot; =&gt; (handle_interaction  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]})
 | &quot;Facet&quot; =&gt; (handle_interaction  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]})
 | &quot;Publisher&quot; =&gt; (handle_interaction  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]})
 | &quot;Subscriber&quot; =&gt; (handle_interaction  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn,
  op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=port_type, port_name=port_name,  unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]});

fun update_clocks node_clock_list timers [] = node_clock_list
  | update_clocks   node_clock_list
timers
({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=comp_op}::other_threads) = 

 (update_clocks 
 (progress_clock node_clock_list comp_node
 ( (get_call_exec_t   (exec (hd (get_node_clock comp_node node_clock_list)) 
  timers   
 {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
       comp_st=comp_st, comp_op=comp_op}
      )
    ) 
 - (get_call_exec_t {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio,
 comp_st=comp_st, comp_op=comp_op}))
 )

 timers
 other_threads);


(* Main execute thread function - Run exec on all running threads *)
fun execute_thread node_clock_list timers [] = []
  | execute_thread node_clock_list
     timers
   ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::other_threads) = 
(handle_preempt 
  (update_clocks node_clock_list timers
  ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::other_threads)) 
  (handle_opn (exec (hd (get_node_clock comp_node node_clock_list))
        timers
    {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op})))^^
(execute_thread node_clock_list timers other_threads);

(* Enqueue a list of threads back into the node_ths_list - Basically call establish_order for all threads *)
fun enqueue_thread_list []
nths_list = nths_list
  | enqueue_thread_list (thread::thread_list)
 nths_list = 

(enqueue_thread_list thread_list 
(establish_order thread nths_list));

(* Main preempt guard *)
fun get_all_preempt_threads node_clock_list original_nc timers [] = []
  | get_all_preempt_threads 
                  node_clock_list
                  original_nc
                  timers
  ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}::other_threads) = 

if (preempt_guard (hd (get_node_clock comp_node node_clock_list))  
  {comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op} = true) then 
(handle_opn (exec (hd (get_node_clock comp_node original_nc)) 
timers
{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=comp_op}))
^^(get_all_preempt_threads node_clock_list original_nc timers other_threads)
else 
  (get_all_preempt_threads node_clock_list original_nc timers other_threads);

(* Main Preempt thread function *)
fun preempt_threads nths_list
running_threads
node_clock_list
timers = 
(enqueue_thread_list (get_all_preempt_threads 
(update_clocks node_clock_list timers running_threads) 
node_clock_list
timers
running_threads) nths_list);




(* Main guard to jump time to either the next timer or next partition *)
(* This is the lowest priority transition - so literally every other guard should fail *)
fun jump_time_guard node_clock_list
node_ths_list
node_cmq_list
running_ths
timers
waiting_opns = 

if (  (reached_limit node_clock_list = false) andalso
  (timer_guard node_clock_list timers = false) andalso
  (enqueue_guard waiting_opns node_clock_list = false) andalso
  (schedule_guard node_clock_list node_cmq_list node_ths_list timers waiting_opns running_ths = false) andalso
  (execute_guard node_clock_list node_ths_list running_ths timers waiting_opns = false )) then true else false;


(* No timer expiry before the next partition *)
fun no_timer_expiry_this_partition 
                      {clock_node=clock_node, clock_value=clock_value, schedule=[]}
   timers = false
  | no_timer_expiry_this_partition 
              {clock_node=clock_node, clock_value=clock_value, 
              schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)} 
     [] = true 

  | no_timer_expiry_this_partition 
              {clock_node=clock_node, clock_value=clock_value, 
              schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)} 
  ({t_nid=t_nid, t_pr=t_pr, t_off=t_off, t_op=t_op}::other_timers) = 

  if ((t_nid = clock_node) andalso (t_off &lt; (clock_value + (dur-exec_t)))) then 
  false
  else 
  (true andalso (no_timer_expiry_this_partition
  {clock_node=clock_node, clock_value=clock_value, 
              schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)}
                 other_timers));

(* Jump time on each node and return updated node_clock *)
fun jump_time_this_node timers 
{clock_node=clock_node, clock_value=clock_value, schedule=[]} = 
(update_node_clock (when_is_next_timer clock_value clock_node timers)
{clock_node=clock_node, clock_value=clock_value, schedule=[]})
  | jump_time_this_node timers 
{clock_node=clock_node, clock_value=clock_value, 
 schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)} = 
if (no_timer_expiry_this_partition
{clock_node=clock_node, clock_value=clock_value, 
   schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)}
timers = true) then 
(update_node_clock (dur-exec_t) 
{clock_node=clock_node, clock_value=clock_value, 
    schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)})
(* Find and jump to next timer *)
else 
    (update_node_clock (when_is_next_timer clock_value clock_node timers)
    {clock_node=clock_node, clock_value=clock_value, 
    schedule=({part_name=part_name, exec_t = exec_t, dur=dur, pr=pr, off=off}::rest)});

(* Main jump time function *)
(* HUGE Assumption here - Assuming no inter-node interactions *)
(* Therefore, treating each node as independent of the rest *)
(* So, decision behind jumping the clock on one node does not depend on state of any other node *)
fun jump_time timers [] = []
  | jump_time timers
  ({clock_node=clock_node, clock_value=clock_value, schedule=schedule}::other_node_clocks) =

(jump_time_this_node timers {clock_node=clock_node, clock_value=clock_value, schedule=schedule})
::(jump_time timers other_node_clocks);


(* Accumulate a list of threads that CAN be unblocked right now *)
fun find_ths_to_unblock [] 
    {comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
  comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op2}
                        = []

  | find_ths_to_unblock ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_blked_threads)

 {comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
    comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[]} = 

         []

  | find_ths_to_unblock ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_blked_threads)

{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=[]}]} = 

         []

  | find_ths_to_unblock ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_blked_threads)

{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=({port_type=port_type2, port_name=port_name2, unblk_list=unblk_list2, induced=induced2, call_st=call_st2, call_et=call_et2, call_exec_t=call_exec_t2, call_dur=call_dur2}::other_calls2)}]} = 

 if ((other_calls2 = []) andalso (contains unblk_list2 [{node_name=comp_node,
  comp_name=comp_name, port_name=port_name}]) = true 
  andalso (call_exec_t2  = call_dur2)) then 

 [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=other_calls}]}]
 
^^(find_ths_to_unblock other_blked_threads 
{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=({port_type=port_type2, port_name=port_name2, unblk_list=unblk_list2, induced=induced2, call_st=call_st2, call_et=call_et2, call_exec_t=call_exec_t2, call_dur=call_dur2}::other_calls2)}]})

 else 
 (find_ths_to_unblock other_blked_threads 
{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=({port_type=port_type2, port_name=port_name2, unblk_list=unblk_list2, induced=induced2, call_st=call_st2, call_et=call_et2, call_exec_t=call_exec_t2, call_dur=call_dur2}::other_calls2)}]});


(* Accumulate a list of threads that CAN be removed right now from blocked threads list *)
fun find_ths_to_remove [] 
    {comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
  comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op2}
                        = []

  | find_ths_to_remove ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_blked_threads)

 {comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
    comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[]} = 

         []

  | find_ths_to_remove ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_blked_threads)

{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=[]}]} = 

         []

  | find_ths_to_remove ({comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}::other_blked_threads)

{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=({port_type=port_type2, port_name=port_name2, unblk_list=unblk_list2, induced=induced2, call_st=call_st2, call_et=call_et2, call_exec_t=call_exec_t2, call_dur=call_dur2}::other_calls2)}]} = 

 if ((other_calls2 = []) andalso (contains unblk_list2 [{node_name=comp_node,
  comp_name=comp_name, port_name=port_name}]) = true 
  andalso (call_exec_t2  = call_dur2)) then 

 [{comp_node=comp_node, comp_name=comp_name, comp_part=comp_part, comp_prio=comp_prio, comp_st=comp_st, comp_op=[{opname=opname, op_node=op_node, op_comp=op_comp, 
op_pn=op_pn, op_prio=op_prio, op_dl=op_dl, op_st=op_st, op_dv=op_dv, op_calls=({port_type=&quot;RMI_Receptacle&quot;, port_name=port_name, unblk_list=unblk_list, induced=induced, call_st=call_st, call_et=call_et, call_exec_t=call_exec_t, call_dur=call_dur}::other_calls)}]}]
 
^^(find_ths_to_remove other_blked_threads 
{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=({port_type=port_type2, port_name=port_name2, unblk_list=unblk_list2, induced=induced2, call_st=call_st2, call_et=call_et2, call_exec_t=call_exec_t2, call_dur=call_dur2}::other_calls2)}]})

 else 
 (find_ths_to_remove other_blked_threads 
{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, comp_prio=comp_prio2, comp_st=comp_st2, comp_op=[{opname=opname2, op_node=op_node2, op_comp=op_comp2, op_pn=op_pn2, op_prio=op_prio2, op_dl=op_dl2, 
 op_st=op_st2, op_dv=op_dv2, op_calls=({port_type=port_type2, port_name=port_name2, unblk_list=unblk_list2, induced=induced2, call_st=call_st2, call_et=call_et2, call_exec_t=call_exec_t2, call_dur=call_dur2}::other_calls2)}]});


(* Find all threads to be removed *)
fun find_all_removed_threads all_blocked_threads node_clock_list timers
 [] = []
  | find_all_removed_threads all_blocked_threads node_clock_list timers
 ({comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
  comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op}::other_threads) = 
(find_ths_to_remove all_blocked_threads 
(exec   (hd (get_node_clock comp_node2 node_clock_list))  timers  
{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
              comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op}) )
^^(find_all_removed_threads all_blocked_threads node_clock_list timers other_threads);



(* Iterate through all running threads and chcek and fine threads to unblock *)
fun find_all_unblked_threads all_blocked_threads node_clock_list timers
 [] = []
  | find_all_unblked_threads all_blocked_threads node_clock_list timers
 ({comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
  comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op}::other_threads) = 
(find_ths_to_unblock all_blocked_threads 
(exec   (hd (get_node_clock comp_node2 node_clock_list))  timers  
{comp_node=comp_node2, comp_name=comp_name2, comp_part=comp_part2, 
              comp_prio=comp_prio2, comp_st=comp_st2, comp_op=comp_op}) )
^^(find_all_unblked_threads all_blocked_threads node_clock_list timers other_threads);

(* Main Unblock thread function *)
fun unblock_threads nths_list
node_clock_list
timers
running_threads
all_blocked_threads = 
(enqueue_thread_list (find_all_unblked_threads all_blocked_threads node_clock_list timers running_threads) nths_list);


(* Remove threads from list *)
fun remove_these_threads blocked_threads
 [] = blocked_threads
  | remove_these_threads blocked_threads
 (thread::other_unblocked_threads) = 
(remove_these_threads (rm thread blocked_threads) other_unblocked_threads);

(* Update Blocked Threads - MAIN *)
fun update_blocked_threads running_threads
   node_clock_list
   timers
   all_blocked_threads = 
(remove_these_threads all_blocked_threads
(find_all_removed_threads all_blocked_threads node_clock_list timers running_threads));</layout>
        </ml>
      </block>
    </globbox>
    <page id="ID6">
      <pageattr name="Analysis"/>
      <place id="ID1431742610">
        <posattr x="-496.000000"
                 y="33.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Clocks</text>
        <ellipse w="60.000000"
                 h="40.000000"/>
        <token x="-44.000000"
               y="24.000000"/>
        <marking x="0.000000"
                 y="48.750000"
                 hidden="false">
          <snap snap_id="0"
                anchor.horizontal="1"
                anchor.vertical="3"/>
        </marking>
        <type id="ID1431742611">
          <posattr x="-432.500000"
                   y="9.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">node_clocks</text>
        </type>
        <initmark id="ID1431742612">
          <posattr x="-475.000000"
                   y="1249.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">1`[{clock_node=&quot;Sat1&quot;, clock_value=0, schedule=[{part_name=&quot;Part1&quot;, exec_t=0, dur=100, pr=40, off=0}, 
                                                                                 {part_name=&quot;Part2&quot;, exec_t=0, dur=100, pr=40, off=100}, 
                                                                                 {part_name=&quot;Part3&quot;, exec_t=0, dur=100, pr=40, off=200}, 
                                                                                 {part_name=&quot;Part4&quot;, exec_t=0, dur=100, pr=40, off=300}, 
                                                                                 {part_name=&quot;Part5&quot;, exec_t=0, dur=100, pr=40, off=400}]}]</text>
        </initmark>
      </place>
      <place id="ID1431753215">
        <posattr x="-777.000000"
                 y="-166.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Waiting</text>
        <ellipse w="85.000000"
                 h="40.000000"/>
        <token x="-103.000000"
               y="0.000000"/>
        <marking x="-27.000000"
                 y="0.000000"
                 hidden="false">
          <snap snap_id="4"
                anchor.horizontal="2"
                anchor.vertical="3"/>
        </marking>
        <type id="ID1431753216">
          <posattr x="-719.000000"
                   y="-189.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">opn_list</text>
        </type>
        <initmark id="ID1431753217">
          <posattr x="-848.000000"
                   y="-148.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">1`[]</text>
        </initmark>
      </place>
      <place id="ID1431784399">
        <posattr x="103.000000"
                 y="185.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Component_Threads</text>
        <ellipse w="162.500000"
                 h="40.000000"/>
        <token x="-180.500000"
               y="0.000000"/>
        <marking x="-43.250000"
                 y="-1.250000"
                 hidden="false">
          <snap snap_id="0"
                anchor.horizontal="2"
                anchor.vertical="2"/>
        </marking>
        <type id="ID1431784400">
          <posattr x="187.500000"
                   y="161.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">threads</text>
        </type>
        <initmark id="ID1431784401">
          <posattr x="1519.500000"
                   y="1076.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">1`[{nid=&quot;Sat1&quot;, can_sched=true, node_ths=[{part=&quot;Part1&quot;, ths=[{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp3&quot;, comp_part=&quot;Part1&quot;, comp_prio=80, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp4&quot;, comp_part=&quot;Part1&quot;, comp_prio=70, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp5&quot;, comp_part=&quot;Part1&quot;, comp_prio=60, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp6&quot;, comp_part=&quot;Part1&quot;, comp_prio=50, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp7&quot;, comp_part=&quot;Part1&quot;, comp_prio=45, comp_st=0, comp_op=[]},    
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp8&quot;, comp_part=&quot;Part1&quot;, comp_prio=40, comp_st=0, comp_op=[]}]}, 
                                          {part=&quot;Part2&quot;, ths=[{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp13&quot;, comp_part=&quot;Part2&quot;, comp_prio=80, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp14&quot;, comp_part=&quot;Part1&quot;, comp_prio=70, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp15&quot;, comp_part=&quot;Part1&quot;, comp_prio=60, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp16&quot;, comp_part=&quot;Part1&quot;, comp_prio=50, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp17&quot;, comp_part=&quot;Part1&quot;, comp_prio=45, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp18&quot;, comp_part=&quot;Part2&quot;, comp_prio=40, comp_st=0, comp_op=[]}]}, 
                                          {part=&quot;Part3&quot;, ths=[{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp23&quot;, comp_part=&quot;Part3&quot;, comp_prio=80, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp24&quot;, comp_part=&quot;Part1&quot;, comp_prio=70, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp25&quot;, comp_part=&quot;Part1&quot;, comp_prio=60, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp26&quot;, comp_part=&quot;Part1&quot;, comp_prio=50, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp27&quot;, comp_part=&quot;Part1&quot;, comp_prio=45, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp28&quot;, comp_part=&quot;Part3&quot;, comp_prio=40, comp_st=0, comp_op=[]}]}, 
                                          {part=&quot;Part4&quot;, ths=[{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp33&quot;, comp_part=&quot;Part4&quot;, comp_prio=80, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp34&quot;, comp_part=&quot;Part1&quot;, comp_prio=70, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp35&quot;, comp_part=&quot;Part1&quot;, comp_prio=60, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp36&quot;, comp_part=&quot;Part1&quot;, comp_prio=50, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp37&quot;, comp_part=&quot;Part1&quot;, comp_prio=45, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp38&quot;, comp_part=&quot;Part4&quot;, comp_prio=40, comp_st=0, comp_op=[]}]}, 
                                          {part=&quot;Part5&quot;, ths=[{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp43&quot;, comp_part=&quot;Part5&quot;, comp_prio=80, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp44&quot;, comp_part=&quot;Part1&quot;, comp_prio=70, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp45&quot;, comp_part=&quot;Part1&quot;, comp_prio=60, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp46&quot;, comp_part=&quot;Part1&quot;, comp_prio=50, comp_st=0, comp_op=[]}, 
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp47&quot;, comp_part=&quot;Part1&quot;, comp_prio=45, comp_st=0, comp_op=[]},  
                                                              {comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp48&quot;, comp_part=&quot;Part5&quot;, comp_prio=40, comp_st=0, comp_op=[]}]}]}
    ]</text>
        </initmark>
      </place>
      <place id="ID1431802191">
        <posattr x="103.000000"
                 y="476.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Init_Threads</text>
        <ellipse w="112.500000"
                 h="40.000000"/>
        <token x="-10.000000"
               y="0.000000"/>
        <marking x="-1.000000"
                 y="0.000000"
                 hidden="false">
          <snap snap_id="2"
                anchor.horizontal="1"
                anchor.vertical="3"/>
        </marking>
        <type id="ID1431802192">
          <posattr x="186.500000"
                   y="452.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">comp_thread</text>
        </type>
        <initmark id="ID1431802193">
          <posattr x="216.000000"
                   y="868.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp1&quot;, comp_part=&quot;Part1&quot;, comp_prio=90, comp_st=0, comp_op=[]}++ 
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp2&quot;, comp_part=&quot;Part1&quot;, comp_prio=90, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp9&quot;, comp_part=&quot;Part2&quot;, comp_prio=30, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp10&quot;, comp_part=&quot;Part2&quot;, comp_prio=30, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp11&quot;, comp_part=&quot;Part3&quot;, comp_prio=90, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp12&quot;, comp_part=&quot;Part3&quot;, comp_prio=90, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp19&quot;, comp_part=&quot;Part4&quot;, comp_prio=30, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp20&quot;, comp_part=&quot;Part4&quot;, comp_prio=30, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp21&quot;, comp_part=&quot;Part5&quot;, comp_prio=90, comp_st=0, comp_op=[]}++ 
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp22&quot;, comp_part=&quot;Part5&quot;, comp_prio=90, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp29&quot;, comp_part=&quot;Part1&quot;, comp_prio=30, comp_st=0, comp_op=[]}++ 
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp30&quot;, comp_part=&quot;Part1&quot;, comp_prio=30, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp31&quot;, comp_part=&quot;Part2&quot;, comp_prio=90, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp32&quot;, comp_part=&quot;Part2&quot;, comp_prio=90, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp39&quot;, comp_part=&quot;Part3&quot;, comp_prio=30, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp40&quot;, comp_part=&quot;Part3&quot;, comp_prio=30, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp41&quot;, comp_part=&quot;Part4&quot;, comp_prio=90, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp42&quot;, comp_part=&quot;Part4&quot;, comp_prio=90, comp_st=0, comp_op=[]}++
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp49&quot;, comp_part=&quot;Part5&quot;, comp_prio=30, comp_st=0, comp_op=[]}++ 
1`{comp_node=&quot;Sat1&quot;, comp_name=&quot;Comp50&quot;, comp_part=&quot;Part5&quot;, comp_prio=30, comp_st=0, comp_op=[]}</text>
        </initmark>
      </place>
      <place id="ID1431741615">
        <posattr x="-777.000000"
                 y="205.500000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Timers</text>
        <ellipse w="77.500000"
                 h="40.000000"/>
        <token x="-82.750000"
               y="16.500000"/>
        <marking x="-14.000000"
                 y="0.000000"
                 hidden="false">
          <snap snap_id="1"
                anchor.horizontal="2"
                anchor.vertical="2"/>
        </marking>
        <type id="ID1431741616">
          <posattr x="-726.500000"
                   y="181.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">timers</text>
        </type>
        <initmark id="ID1431779513">
          <posattr x="-1988.000000"
                   y="328.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">1`[
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp1&quot;, op_pn=&quot;Part1&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp2&quot;, op_pn=&quot;Part1&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp3&quot;, op_pn=&quot;Part1&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp4&quot;, op_pn=&quot;Part1&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp5&quot;, op_pn=&quot;Part1&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp6&quot;, op_pn=&quot;Part1&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp7&quot;, op_pn=&quot;Part1&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp8&quot;, op_pn=&quot;Part1&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp9&quot;, op_pn=&quot;Part1&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp10&quot;, op_pn=&quot;Part1&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp11&quot;, op_pn=&quot;Part2&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp11&quot;, op_pn=&quot;Part2&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp13&quot;, op_pn=&quot;Part2&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp14&quot;, op_pn=&quot;Part2&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp15&quot;, op_pn=&quot;Part2&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 

    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0,
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp16&quot;, op_pn=&quot;Part2&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp17&quot;, op_pn=&quot;Part2&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp18&quot;, op_pn=&quot;Part2&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp19&quot;, op_pn=&quot;Part2&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp20&quot;, op_pn=&quot;Part2&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 

    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp21&quot;, op_pn=&quot;Part3&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp22&quot;, op_pn=&quot;Part3&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp23&quot;, op_pn=&quot;Part3&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp24&quot;, op_pn=&quot;Part3&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp25&quot;, op_pn=&quot;Part3&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 

    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0,
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp26&quot;, op_pn=&quot;Part3&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp27&quot;, op_pn=&quot;Part3&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp28&quot;, op_pn=&quot;Part3&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp29&quot;, op_pn=&quot;Part3&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp30&quot;, op_pn=&quot;Part3&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 

    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp31&quot;, op_pn=&quot;Part4&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp32&quot;, op_pn=&quot;Part4&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp33&quot;, op_pn=&quot;Part4&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp34&quot;, op_pn=&quot;Part4&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp35&quot;, op_pn=&quot;Part4&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 

    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp36&quot;, op_pn=&quot;Part4&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp37&quot;, op_pn=&quot;Part4&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp38&quot;, op_pn=&quot;Part4&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp39&quot;, op_pn=&quot;Part4&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp40&quot;, op_pn=&quot;Part4&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 

    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp41&quot;, op_pn=&quot;Part5&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp42&quot;, op_pn=&quot;Part5&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp43&quot;, op_pn=&quot;Part5&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp44&quot;, op_pn=&quot;Part5&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp45&quot;, op_pn=&quot;Part5&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}},

    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp46&quot;, op_pn=&quot;Part5&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp47&quot;, op_pn=&quot;Part5&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp48&quot;, op_pn=&quot;Part5&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp49&quot;, op_pn=&quot;Part5&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}, 
    {t_nid=&quot;Sat1&quot;, t_pr=100, t_off=0, 
               t_op={opname=&quot;on_timer&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Comp50&quot;, op_pn=&quot;Part5&quot;, op_prio=60, op_dl=10, op_st=0, op_dv=false, 
                                  op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=4}]}}]</text>
        </initmark>
      </place>
      <place id="ID1431958926">
        <posattr x="-202.000000"
                 y="-229.500000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Component_Message_Queues</text>
        <ellipse w="215.000000"
                 h="65.000000"/>
        <token x="-42.500000"
               y="26.500000"/>
        <marking x="-1.000000"
                 y="0.000000"
                 hidden="false">
          <snap snap_id="2"
                anchor.horizontal="1"
                anchor.vertical="3"/>
        </marking>
        <type id="ID1431958927">
          <posattr x="-77.500000"
                   y="-262.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">node_cmq_list</text>
        </type>
        <initmark id="ID1431958928">
          <posattr x="326.500000"
                   y="1437.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">1`[{cmq_node=&quot;Sat1&quot;, cmqs=[ {cmq_part=&quot;Part1&quot;, cmq_list=[{comp_name=&quot;Comp1&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp2&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp3&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp4&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp5&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp6&quot;, cmq=[]},                                                          
                                                         {comp_name=&quot;Comp7&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp8&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp9&quot;, cmq=[]},                                                          
                                                         {comp_name=&quot;Comp10&quot;, cmq=[]}]}, 
                            {cmq_part=&quot;Part2&quot;, cmq_list=[{comp_name=&quot;Comp11&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp12&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp13&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp14&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp15&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp16&quot;, cmq=[]},                                                          
                                                         {comp_name=&quot;Comp17&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp18&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp19&quot;, cmq=[]},   
                                                         {comp_name=&quot;Comp20&quot;, cmq=[]}]}, 
                            {cmq_part=&quot;Part3&quot;, cmq_list=[{comp_name=&quot;Comp21&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp22&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp23&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp24&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp25&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp26&quot;, cmq=[]},                                                          
                                                         {comp_name=&quot;Comp27&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp28&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp29&quot;, cmq=[]},   
                                                         {comp_name=&quot;Comp30&quot;, cmq=[]}]}, 
                            {cmq_part=&quot;Part4&quot;, cmq_list=[{comp_name=&quot;Comp31&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp32&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp33&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp34&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp35&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp36&quot;, cmq=[]},                                                          
                                                         {comp_name=&quot;Comp37&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp38&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp39&quot;, cmq=[]},   
                                                         {comp_name=&quot;Comp40&quot;, cmq=[]}]}, 
                            {cmq_part=&quot;Part5&quot;, cmq_list=[{comp_name=&quot;Comp41&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp42&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp43&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp44&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp45&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp46&quot;, cmq=[]},                                                          
                                                         {comp_name=&quot;Comp47&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp48&quot;, cmq=[]}, 
                                                         {comp_name=&quot;Comp49&quot;, cmq=[]},   
                                                         {comp_name=&quot;Comp50&quot;, cmq=[]}]}]}]</text>
        </initmark>
      </place>
      <place id="ID1431968398">
        <posattr x="708.000000"
                 y="33.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Running_Threads</text>
        <ellipse w="140.000000"
                 h="47.500000"/>
        <token x="-114.000000"
               y="27.750000"/>
        <marking x="-14.000000"
                 y="13.000000"
                 hidden="false">
          <snap snap_id="3"
                anchor.horizontal="2"
                anchor.vertical="2"/>
        </marking>
        <type id="ID1431968399">
          <posattr x="805.000000"
                   y="6.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">comp_threads</text>
        </type>
        <initmark id="ID1431968400">
          <posattr x="773.000000"
                   y="59.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">1`[]</text>
        </initmark>
      </place>
      <place id="ID1433515309">
        <posattr x="1368.000000"
                 y="-165.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Component_Interactions</text>
        <ellipse w="167.500000"
                 h="67.500000"/>
        <token x="-10.000000"
               y="0.000000"/>
        <marking x="-2.500000"
                 y="-20.250000"
                 hidden="false">
          <snap snap_id="0"
                anchor.horizontal="1"
                anchor.vertical="3"/>
        </marking>
        <type id="ID1433515310">
          <posattr x="1475.500000"
                   y="-198.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">induce_op_list</text>
        </type>
        <initmark id="ID1434975543">
          <posattr x="1443.000000"
                   y="-131.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">1`[]</text>
        </initmark>
      </place>
      <place id="ID1433984497">
        <posattr x="1809.000000"
                 y="175.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Blocked_Threads</text>
        <ellipse w="180.000000"
                 h="65.000000"/>
        <token x="-171.000000"
               y="25.000000"/>
        <marking x="-24.000000"
                 y="9.000000"
                 hidden="false">
          <snap snap_id="7"
                anchor.horizontal="3"
                anchor.vertical="2"/>
        </marking>
        <type id="ID1433984498">
          <posattr x="1920.000000"
                   y="142.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">comp_threads</text>
        </type>
        <initmark id="ID1433984499">
          <posattr x="1888.000000"
                   y="207.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">1`[]</text>
        </initmark>
      </place>
      <place id="ID1434978219">
        <posattr x="-65.750000"
                 y="595.500000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Num</text>
        <ellipse w="60.000000"
                 h="40.000000"/>
        <token x="-10.000000"
               y="0.000000"/>
        <marking x="0.000000"
                 y="0.000000"
                 hidden="false">
          <snap snap_id="0"
                anchor.horizontal="0"
                anchor.vertical="0"/>
        </marking>
        <type id="ID1434978220">
          <posattr x="-30.500000"
                   y="571.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">INT</text>
        </type>
        <initmark id="ID1434978221">
          <posattr x="-25.000000"
                   y="619.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">1`10</text>
        </initmark>
      </place>
      <trans id="ID1431805234"
             explicit="false">
        <posattr x="103.000000"
                 y="335.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Establish_Order</text>
        <box w="115.000000"
             h="52.500000"/>
        <binding x="7.200000"
                 y="-3.000000"/>
        <cond id="ID1434979509">
          <posattr x="36.500000"
                   y="372.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </cond>
        <time id="ID1431805236">
          <posattr x="175.000000"
                   y="372.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </time>
        <code id="ID1431805237">
          <posattr x="195.000000"
                   y="276.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </code>
        <channel id="ID1431805238">
          <posattr x="194.000000"
                   y="335.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </channel>
        <priority id="ID1431805239">
          <posattr x="7.500000"
                   y="297.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </priority>
      </trans>
      <trans id="ID1431750974"
             explicit="false">
        <posattr x="-777.000000"
                 y="33.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Timer_Expiry</text>
        <box w="90.000000"
             h="57.500000"/>
        <binding x="7.200000"
                 y="-3.000000"/>
        <cond id="ID1431766153">
          <posattr x="-882.000000"
                   y="77.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">[timer_guard nc timers]</text>
        </cond>
        <time id="ID1431750976">
          <posattr x="-717.500000"
                   y="72.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </time>
        <code id="ID1431750977">
          <posattr x="-697.500000"
                   y="-27.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </code>
        <channel id="ID1431750978">
          <posattr x="-698.500000"
                   y="33.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </channel>
        <priority id="ID1431750979">
          <posattr x="-860.000000"
                   y="-6.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </priority>
      </trans>
      <trans id="ID1431930043"
             explicit="false">
        <posattr x="103.000000"
                 y="33.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Schedule_Thread</text>
        <box w="137.500000"
             h="65.000000"/>
        <binding x="7.200000"
                 y="-3.000000"/>
        <cond id="ID1431930044">
          <posattr x="340.500000"
                   y="90.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">[schedule_guard nc ncmq_list nths_list timers opn_list ths]</text>
        </cond>
        <time id="ID1431930045">
          <posattr x="186.250000"
                   y="76.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </time>
        <code id="ID1431930046">
          <posattr x="206.250000"
                   y="-31.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </code>
        <channel id="ID1431930047">
          <posattr x="205.250000"
                   y="33.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </channel>
        <priority id="ID1431930048">
          <posattr x="-3.750000"
                   y="-10.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </priority>
      </trans>
      <trans id="ID1431950706"
             explicit="false">
        <posattr x="-496.000000"
                 y="-229.500000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Enqueue_Operation</text>
        <box w="150.000000"
             h="57.500000"/>
        <binding x="7.200000"
                 y="-3.000000"/>
        <cond id="ID1431950707">
          <posattr x="-598.500000"
                   y="-184.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">[enqueue_guard opn_list nc]</text>
        </cond>
        <time id="ID1431950708">
          <posattr x="-406.500000"
                   y="-189.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </time>
        <code id="ID1431950709">
          <posattr x="-386.500000"
                   y="-290.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </code>
        <channel id="ID1431950710">
          <posattr x="-387.500000"
                   y="-229.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </channel>
        <priority id="ID1431950711">
          <posattr x="-609.000000"
                   y="-269.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </priority>
      </trans>
      <trans id="ID1432781540"
             explicit="false">
        <posattr x="1104.250000"
                 y="33.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Execute_Thread</text>
        <box w="127.500000"
             h="55.000000"/>
        <binding x="7.200000"
                 y="-3.000000"/>
        <cond id="ID1432781541">
          <posattr x="914.000000"
                   y="98.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">[execute_guard nc nths_list ths timers opn_list]</text>
        </cond>
        <time id="ID1432781542">
          <posattr x="1182.500000"
                   y="71.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </time>
        <code id="ID1432781543">
          <posattr x="1202.500000"
                   y="-26.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </code>
        <channel id="ID1432781544">
          <posattr x="1201.500000"
                   y="33.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </channel>
        <priority id="ID1432781545">
          <posattr x="1002.500000"
                   y="-5.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </priority>
      </trans>
      <trans id="ID1434873944"
             explicit="false">
        <posattr x="-322.000000"
                 y="375.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Progress_Time</text>
        <box w="132.500000"
             h="75.000000"/>
        <binding x="7.200000"
                 y="-3.000000"/>
        <cond id="ID1434873945">
          <posattr x="-554.000000"
                   y="430.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">[jump_time_guard nc nths_list ncmq_list ths timers opn_list = true]</text>
        </cond>
        <time id="ID1434873946">
          <posattr x="-241.250000"
                   y="423.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </time>
        <code id="ID1434873947">
          <posattr x="-221.250000"
                   y="305.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </code>
        <channel id="ID1434873948">
          <posattr x="-222.250000"
                   y="375.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </channel>
        <priority id="ID1434873949">
          <posattr x="-426.250000"
                   y="326.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0"/>
        </priority>
      </trans>
      <arc id="ID1431807100"
           orientation="PtoT"
           order="2">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431805234"/>
        <placeend idref="ID1431802191"/>
        <annot id="ID1431807101">
          <posattr x="113.500000"
                   y="409.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">th</text>
        </annot>
      </arc>
      <arc id="ID1431807729"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431805234"/>
        <placeend idref="ID1431784399"/>
        <bendpoint id="ID1431872040"
                   serial="1">
          <posattr x="128.000000"
                   y="281.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1431807730">
          <posattr x="219.000000"
                   y="267.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">establish_order th nths_list</text>
        </annot>
      </arc>
      <arc id="ID1431850886"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431805234"/>
        <placeend idref="ID1431784399"/>
        <bendpoint id="ID1431850888"
                   serial="1">
          <posattr x="74.250000"
                   y="250.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1431850887">
          <posattr x="43.000000"
                   y="265.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">nths_list</text>
        </annot>
      </arc>
      <arc id="ID1431753484"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431750974"/>
        <placeend idref="ID1431753215"/>
        <bendpoint id="ID1432036501"
                   serial="1">
          <posattr x="-757.000000"
                   y="-37.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1431765770">
          <posattr x="-663.000000"
                   y="-59.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">opn_list^^(expire nc timers)</text>
        </annot>
      </arc>
      <arc id="ID1431752951"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431750974"/>
        <placeend idref="ID1431742610"/>
        <annot id="ID1431752952">
          <posattr x="-630.000000"
                   y="44.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">nc</text>
        </annot>
      </arc>
      <arc id="ID1431774894"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431750974"/>
        <placeend idref="ID1431741615"/>
        <bendpoint id="ID1431774896"
                   serial="1">
          <posattr x="-904.500000"
                   y="33.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1431774897"
                   serial="2">
          <posattr x="-904.500000"
                   y="205.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1431774895">
          <posattr x="-990.500000"
                   y="126.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">(update_timers nc timers)</text>
        </annot>
      </arc>
      <arc id="ID1431752691"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431750974"/>
        <placeend idref="ID1431741615"/>
        <annot id="ID1431752692">
          <posattr x="-753.500000"
                   y="124.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">timers</text>
        </annot>
      </arc>
      <arc id="ID1431931003"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431930043"/>
        <placeend idref="ID1431784399"/>
        <bendpoint id="ID1432510267"
                   serial="1">
          <posattr x="134.250000"
                   y="154.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1431931004">
          <posattr x="165.000000"
                   y="110.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">nths_list</text>
        </annot>
      </arc>
      <arc id="ID1431935813"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431930043"/>
        <placeend idref="ID1431741615"/>
        <bendpoint id="ID1431935816"
                   serial="1">
          <posattr x="-300.750000"
                   y="59.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1431935815"
                   serial="2">
          <posattr x="-300.750000"
                   y="205.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1431935814">
          <posattr x="-133.000000"
                   y="70.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">timers</text>
        </annot>
      </arc>
      <arc id="ID1431936789"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431930043"/>
        <placeend idref="ID1431742610"/>
        <bendpoint id="ID1431947674"
                   serial="1">
          <posattr x="-329.500000"
                   y="33.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1431936790">
          <posattr x="-148.000000"
                   y="44.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">nc</text>
        </annot>
      </arc>
      <arc id="ID1431945664"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431930043"/>
        <placeend idref="ID1431753215"/>
        <bendpoint id="ID1431945668"
                   serial="1">
          <posattr x="65.500000"
                   y="-18.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1431945667"
                   serial="2">
          <posattr x="-588.250000"
                   y="-18.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1431945666"
                   serial="3">
          <posattr x="-588.250000"
                   y="-166.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1431945665">
          <posattr x="-136.000000"
                   y="-7.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">opn_list</text>
        </annot>
      </arc>
      <arc id="ID1431951729"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431950706"/>
        <placeend idref="ID1431753215"/>
        <bendpoint id="ID1431951731"
                   serial="1">
          <posattr x="-777.000000"
                   y="-229.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1431951730">
          <posattr x="-674.000000"
                   y="-219.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">opn_list</text>
        </annot>
      </arc>
      <arc id="ID1431959972"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431950706"/>
        <placeend idref="ID1431958926"/>
        <annot id="ID1431959973">
          <posattr x="-337.000000"
                   y="-363.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">enqueue_opns nc opn_list ncmq_list</text>
        </annot>
      </arc>
      <arc id="ID1431970544"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431930043"/>
        <placeend idref="ID1431958926"/>
        <bendpoint id="ID1431970547"
                   serial="1">
          <posattr x="86.750000"
                   y="-49.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1431970546"
                   serial="2">
          <posattr x="-202.000000"
                   y="-49.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1431970545">
          <posattr x="-58.000000"
                   y="-39.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">ncmq_list</text>
        </annot>
      </arc>
      <arc id="ID1432029090"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431950706"/>
        <placeend idref="ID1431742610"/>
        <annot id="ID1432029091">
          <posattr x="-485.000000"
                   y="-94.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">nc</text>
        </annot>
      </arc>
      <arc id="ID1432034018"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431750974"/>
        <placeend idref="ID1431753215"/>
        <bendpoint id="ID1432034020"
                   serial="1">
          <posattr x="-795.750000"
                   y="-89.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1432034019">
          <posattr x="-825.000000"
                   y="-56.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">opn_list</text>
        </annot>
      </arc>
      <arc id="ID1432093965"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431950706"/>
        <placeend idref="ID1431958926"/>
        <bendpoint id="ID1432093968"
                   serial="1">
          <posattr x="-463.250000"
                   y="-175.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1432093967"
                   serial="2">
          <posattr x="-202.000000"
                   y="-175.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1432093966">
          <posattr x="-331.000000"
                   y="-165.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">ncmq_list</text>
        </annot>
      </arc>
      <arc id="ID1432279784"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431950706"/>
        <placeend idref="ID1431753215"/>
        <bendpoint id="ID1432279786"
                   serial="1">
          <posattr x="-496.000000"
                   y="-313.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1432279787"
                   serial="2">
          <posattr x="-817.000000"
                   y="-313.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1432279785">
          <posattr x="-639.000000"
                   y="-302.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">update_waiting_list nc opn_list ncmq_list</text>
        </annot>
      </arc>
      <arc id="ID1432418556"
           orientation="TtoP"
           order="2">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431930043"/>
        <placeend idref="ID1431968398"/>
        <annot id="ID1432418557">
          <posattr x="438.000000"
                   y="51.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">(ths)^^(schedule_thread nc ncmq_list nths_list)</text>
        </annot>
      </arc>
      <arc id="ID1432487796"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431930043"/>
        <placeend idref="ID1431958926"/>
        <bendpoint id="ID1432487798"
                   serial="1">
          <posattr x="103.000000"
                   y="-87.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1432487799"
                   serial="2">
          <posattr x="-177.000000"
                   y="-87.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1432487797">
          <posattr x="-42.000000"
                   y="-76.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">dequeue_opn nc ncmq_list nths_list</text>
        </annot>
      </arc>
      <arc id="ID1432588574"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431930043"/>
        <placeend idref="ID1431784399"/>
        <bendpoint id="ID1432592921"
                   serial="1">
          <posattr x="79.250000"
                   y="114.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1432588575">
          <posattr x="-43.000000"
                   y="130.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">remove_thread nc ncmq_list nths_list</text>
        </annot>
      </arc>
      <arc id="ID1432625909"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431930043"/>
        <placeend idref="ID1431968398"/>
        <annot id="ID1432625910">
          <posattr x="406.000000"
                   y="15.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">ths</text>
        </annot>
      </arc>
      <arc id="ID1432783970"
           orientation="PtoT"
           order="2">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1432781540"/>
        <placeend idref="ID1431968398"/>
        <annot id="ID1432783971">
          <posattr x="909.000000"
                   y="44.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">ths</text>
        </annot>
      </arc>
      <arc id="ID1432823140"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1432781540"/>
        <placeend idref="ID1431784399"/>
        <bendpoint id="ID1432823142"
                   serial="1">
          <posattr x="1073.000000"
                   y="185.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1432823141">
          <posattr x="331.000000"
                   y="196.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">nths_list</text>
        </annot>
      </arc>
      <arc id="ID1432833056"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1432781540"/>
        <placeend idref="ID1431742610"/>
        <bendpoint id="ID1432833060"
                   serial="1">
          <posattr x="1104.250000"
                   y="-319.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1432833059"
                   serial="2">
          <posattr x="-353.250000"
                   y="-319.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1432833058"
                   serial="3">
          <posattr x="-353.250000"
                   y="33.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1432833057">
          <posattr x="1093.000000"
                   y="-157.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">nc</text>
        </annot>
      </arc>
      <arc id="ID1432838036"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1432781540"/>
        <placeend idref="ID1431741615"/>
        <bendpoint id="ID1432838040"
                   serial="1">
          <posattr x="1129.250000"
                   y="-468.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1432838039"
                   serial="2">
          <posattr x="-1059.500000"
                   y="-468.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1432838038"
                   serial="3">
          <posattr x="-1059.500000"
                   y="205.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1432838037">
          <posattr x="-942.000000"
                   y="-457.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">timers</text>
        </annot>
      </arc>
      <arc id="ID1432850529"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1432781540"/>
        <placeend idref="ID1431753215"/>
        <bendpoint id="ID1432850532"
                   serial="1">
          <posattr x="1154.250000"
                   y="-442.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1432850531"
                   serial="2">
          <posattr x="-777.000000"
                   y="-442.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1432850530">
          <posattr x="295.000000"
                   y="-431.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">opn_list</text>
        </annot>
      </arc>
      <arc id="ID1433386692"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1432781540"/>
        <placeend idref="ID1431968398"/>
        <bendpoint id="ID1433386694"
                   serial="1">
          <posattr x="1073.000000"
                   y="-38.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1433386695"
                   serial="2">
          <posattr x="708.000000"
                   y="-38.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1433386693">
          <posattr x="907.000000"
                   y="-27.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">execute_thread nc timers ths</text>
        </annot>
      </arc>
      <arc id="ID1433583044"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1432781540"/>
        <placeend idref="ID1433515309"/>
        <bendpoint id="ID1434075617"
                   serial="1">
          <posattr x="1224.250000"
                   y="14.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1434825116"
                   serial="2">
          <posattr x="1224.250000"
                   y="-165.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1433583045">
          <posattr x="1250.500000"
                   y="-68.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">iop_list</text>
        </annot>
      </arc>
      <arc id="ID1433638863"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1432781540"/>
        <placeend idref="ID1431753215"/>
        <bendpoint id="ID1433638865"
                   serial="1">
          <posattr x="1115.500000"
                   y="-415.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1433638866"
                   serial="2">
          <posattr x="-797.000000"
                   y="-399.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1433638864">
          <posattr x="302.500000"
                   y="-397.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">opn_list^^(induce_opns ths iop_list)</text>
        </annot>
      </arc>
      <arc id="ID1434002570"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1432781540"/>
        <placeend idref="ID1433984497"/>
        <bendpoint id="ID1434002573"
                   serial="1">
          <posattr x="1151.750000"
                   y="86.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1434002572"
                   serial="2">
          <posattr x="1553.000000"
                   y="86.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1434770146"
                   serial="3">
          <posattr x="1553.000000"
                   y="175.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434002571">
          <posattr x="1227.000000"
                   y="97.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">bths</text>
        </annot>
      </arc>
      <arc id="ID1434053578"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1432781540"/>
        <placeend idref="ID1433984497"/>
        <bendpoint id="ID1434053580"
                   serial="1">
          <posattr x="1809.000000"
                   y="33.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434053579">
          <posattr x="1510.000000"
                   y="44.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">(update_blocked_threads ths nc timers (bths^^(block_threads ths)))</text>
        </annot>
      </arc>
      <arc id="ID1434431038"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1432781540"/>
        <placeend idref="ID1431784399"/>
        <bendpoint id="ID1434431040"
                   serial="1">
          <posattr x="1120.500000"
                   y="185.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434431039">
          <posattr x="881.000000"
                   y="196.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">(preempt_threads (unblock_threads nths_list nc timers ths bths) ths nc timers)</text>
        </annot>
      </arc>
      <arc id="ID1434867183"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1432781540"/>
        <placeend idref="ID1431742610"/>
        <bendpoint id="ID1434867185"
                   serial="1">
          <posattr x="1104.250000"
                   y="-325.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1434867322"
                   serial="2">
          <posattr x="-363.250000"
                   y="-325.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1434867394"
                   serial="3">
          <posattr x="-363.250000"
                   y="33.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434867184">
          <posattr x="436.000000"
                   y="-337.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">update_clocks nc timers ths</text>
        </annot>
      </arc>
      <arc id="ID1434874815"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1434873944"/>
        <placeend idref="ID1431784399"/>
        <bendpoint id="ID1434874818"
                   serial="1">
          <posattr x="-131.000000"
                   y="392.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1434874817"
                   serial="2">
          <posattr x="-131.000000"
                   y="185.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434874816">
          <posattr x="-193.000000"
                   y="403.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">nths_list</text>
        </annot>
      </arc>
      <arc id="ID1434875273"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1434873944"/>
        <placeend idref="ID1431741615"/>
        <bendpoint id="ID1434875275"
                   serial="1">
          <posattr x="-777.000000"
                   y="399.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434875274">
          <posattr x="-583.000000"
                   y="410.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">timers</text>
        </annot>
      </arc>
      <arc id="ID1434875507"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1434873944"/>
        <placeend idref="ID1431742610"/>
        <bendpoint id="ID1434875509"
                   serial="1">
          <posattr x="-496.000000"
                   y="351.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434875508">
          <posattr x="-442.000000"
                   y="340.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">nc</text>
        </annot>
      </arc>
      <arc id="ID1434876218"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1434873944"/>
        <placeend idref="ID1431753215"/>
        <bendpoint id="ID1434876221"
                   serial="1">
          <posattr x="-623.000000"
                   y="375.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1434876220"
                   serial="2">
          <posattr x="-623.000000"
                   y="-105.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434876219">
          <posattr x="-505.000000"
                   y="386.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">opn_list</text>
        </annot>
      </arc>
      <arc id="ID1434879053"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1434873944"/>
        <placeend idref="ID1431958926"/>
        <bendpoint id="ID1434879055"
                   serial="1">
          <posattr x="-202.000000"
                   y="360.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434879054">
          <posattr x="-201.000000"
                   y="370.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">ncmq_list</text>
        </annot>
      </arc>
      <arc id="ID1434880177"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1434873944"/>
        <placeend idref="ID1431968398"/>
        <bendpoint id="ID1434880180"
                   serial="1">
          <posattr x="-322.000000"
                   y="538.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1434880179"
                   serial="2">
          <posattr x="708.000000"
                   y="538.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434880178">
          <posattr x="-336.000000"
                   y="475.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">ths</text>
        </annot>
      </arc>
      <arc id="ID1434895691"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1434873944"/>
        <placeend idref="ID1431742610"/>
        <bendpoint id="ID1434895693"
                   serial="1">
          <posattr x="-322.000000"
                   y="255.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <bendpoint id="ID1434895694"
                   serial="2">
          <posattr x="-514.500000"
                   y="255.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434895692">
          <posattr x="-404.000000"
                   y="267.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">jump_time timers nc</text>
        </annot>
      </arc>
      <arc id="ID1434978287"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431805234"/>
        <placeend idref="ID1434978219"/>
        <bendpoint id="ID1434978289"
                   serial="1">
          <posattr x="-65.750000"
                   y="323.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434978288">
          <posattr x="-10.000000"
                   y="334.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">num_ths</text>
        </annot>
      </arc>
      <arc id="ID1434978314"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431805234"/>
        <placeend idref="ID1434978219"/>
        <bendpoint id="ID1434978316"
                   serial="1">
          <posattr x="-65.750000"
                   y="321.750000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434978315">
          <posattr x="-108.000000"
                   y="508.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">num_ths - 1</text>
        </annot>
      </arc>
      <arc id="ID1434978776"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1431750974"/>
        <placeend idref="ID1434978219"/>
        <bendpoint id="ID1434978778"
                   serial="1">
          <posattr x="-747.000000"
                   y="595.500000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434978777">
          <posattr x="-462.000000"
                   y="606.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">1`0</text>
        </annot>
      </arc>
      <arc id="ID1434980443"
           orientation="BOTHDIR"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1434873944"/>
        <placeend idref="ID1434978219"/>
        <bendpoint id="ID1434980445"
                   serial="1">
          <posattr x="-274.500000"
                   y="554.250000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1434980444">
          <posattr x="-291.000000"
                   y="483.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="3.4.0">1`0</text>
        </annot>
      </arc>
      <Aux id="ID1433729231">
        <posattr x="-115.000000"
                 y="-706.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>1`{node_name=&quot;ALL&quot;, port_name=&quot;Notification&quot;, opn={opname=&quot;on_one_data&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Trajectory_Planner&quot;, op_pn=&quot;Satellite_Group1_TP_Partition&quot;, op_prio=60, op_dl=50, op_st=0, op_et=0, op_exec_t=0, op_dv=false, op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, call_op_name=&quot;on_one_data&quot;, unblk_list=[], blk_on_complete=false, induction=false, q_t=0, pr_t=0, call_st=0, call_et=0, call_exec_t=0, call_dur=8}, {port_type=&quot;Receptacle&quot;, port_name=&quot;Fetch_Sensor_Data&quot;, call_op_name=&quot;on_one_data&quot;, unblk_list=[], blk_on_complete=true, induction=false, q_t=4, pr_t=4, call_st=0, call_et=0, call_exec_t=0, call_dur=8}, {port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, call_op_name=&quot;on_one_data&quot;, unblk_list=[], blk_on_complete=false, induction=false, q_t=0, pr_t=0, call_st=0, call_et=0, call_exec_t=0, call_dur=12}]}}++
1`{node_name=&quot;Sat1&quot;, port_name=&quot;Fetch_Sensor_Data&quot;, opn={opname=&quot;fetch_data&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Sensor&quot;, op_pn=&quot;Satellite_Group1_Sensor_Partition&quot;, op_prio=60, op_dl=50, op_st=0, op_et=0, op_exec_t=0, op_dv=false, op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, call_op_name=&quot;fetch_data&quot;, unblk_list=[{node_name=&quot;Sat1&quot;, comp_name=&quot;Trajectory_Planner&quot;, port_name=&quot;Fetch_Sensor_Data&quot;}], blk_on_complete=false, induction=false, q_t=0, pr_t=0, call_st=0, call_et=0, call_exec_t=0, call_dur=12}]}}</text>
      </Aux>
      <Aux id="ID1434961272">
        <posattr x="2726.750000"
                 y="21.750000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>1`[{node_name=&quot;ALL&quot;, port_name=&quot;Notification&quot;, 
         opn={opname=&quot;on_one_data&quot;, op_node=&quot;Sat1&quot;, op_comp=&quot;Trajectory_Planner&quot;, op_pn=&quot;Part2&quot;, op_prio=60, op_dl=50, op_st=0, op_dv=false, 
                      op_calls=[{port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=12}, 
                                      {port_type=&quot;RMI_Receptacle&quot;, port_name=&quot;Fetch_Sensor_Data&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=0}, 
                                      {port_type=&quot;Local&quot;, port_name=&quot;Local&quot;, unblk_list=[], induced=false, call_st=0, call_et=0, call_exec_t=0, call_dur=16}]}}]</text>
      </Aux>
      <Aux id="ID1434971646">
        <posattr x="63.000000"
                 y="-982.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>val x = [{a=1, b=2}, {a=2, b=4}];
(rmall {a=1, b=2} x)</text>
      </Aux>
      <Aux id="ID1434974347">
        <posattr x="-1005.000000"
                 y="-656.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>val State_Space_Nodes = NoOfNodes();
val Clock_Value = (#clock_value (hd (hd (Mark.Analysis&apos;Clocks 1 (State_Space_Nodes)))));</text>
      </Aux>
      <Aux id="ID1434977374">
        <posattr x="23.000000"
                 y="-1400.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>val nths_list = [{nid=&quot;Sat1&quot;,can_sched=false,node_ths=[{part=&quot;Part1&quot;,ths=[{comp_node=&quot;Sat1&quot;,comp_name=&quot;Comp4&quot;,comp_part=&quot;Part1&quot;,comp_prio=50,comp_st=0,comp_op=[]},{comp_node=&quot;Sat1&quot;,comp_name=&quot;Comp5&quot;,comp_part=&quot;Part1&quot;,comp_prio=50,comp_st=0,comp_op=[]},{comp_node=&quot;Sat1&quot;,comp_name=&quot;Comp3&quot;,comp_part=&quot;Part1&quot;,comp_prio=50,comp_st=0,comp_op=[]},{comp_node=&quot;Sat1&quot;,comp_name=&quot;Comp2&quot;,comp_part=&quot;Part1&quot;,comp_prio=50,comp_st=0,comp_op=[]},{comp_node=&quot;Sat1&quot;,comp_name=&quot;Comp1&quot;,comp_part=&quot;Part1&quot;,comp_prio=50,comp_st=0,comp_op=[]}]},{part=&quot;Part2&quot;,ths=[]},{part=&quot;Part3&quot;,ths=[]},{part=&quot;Part4&quot;,ths=[]},{part=&quot;Part5&quot;,ths=[]}]}];
val nc = [{clock_node=&quot;Sat1&quot;,clock_value=4,schedule=[{part_name=&quot;Part1&quot;,exec_t=4,dur=20,pr=40,off=0},{part_name=&quot;Part2&quot;,exec_t=0,dur=20,pr=40,off=20},{part_name=&quot;Part3&quot;,exec_t=0,dur=20,pr=40,off=40},{part_name=&quot;Part4&quot;,exec_t=0,dur=20,pr=40,off=60},{part_name=&quot;Part5&quot;,exec_t=0,dur=20,pr=40,off=80}]}];
val ncmq_list = [{cmq_node=&quot;Sat1&quot;,cmqs=[{cmq_part=&quot;Part1&quot;,cmq_list=[{comp_name=&quot;Comp1&quot;,cmq=[]},{comp_name=&quot;Comp2&quot;,cmq=[{opname=&quot;on_timer&quot;,op_node=&quot;Sat1&quot;,op_comp=&quot;Comp2&quot;,op_pn=&quot;Part1&quot;,op_prio=60,op_dl=10,op_st=0,op_dv=false,op_calls=[{port_type=&quot;Local&quot;,port_name=&quot;Local&quot;,unblk_list=[],induced=false,call_st=0,call_et=0,call_exec_t=0,call_dur=4}]}]},{comp_name=&quot;Comp3&quot;,cmq=[{opname=&quot;on_timer&quot;,op_node=&quot;Sat1&quot;,op_comp=&quot;Comp3&quot;,op_pn=&quot;Part1&quot;,op_prio=60,op_dl=10,op_st=0,op_dv=false,op_calls=[{port_type=&quot;Local&quot;,port_name=&quot;Local&quot;,unblk_list=[],induced=false,call_st=0,call_et=0,call_exec_t=0,call_dur=4}]}]},{comp_name=&quot;Comp4&quot;,cmq=[{opname=&quot;on_timer&quot;,op_node=&quot;Sat1&quot;,op_comp=&quot;Comp4&quot;,op_pn=&quot;Part1&quot;,op_prio=60,op_dl=10,op_st=0,op_dv=false,op_calls=[{port_type=&quot;Local&quot;,port_name=&quot;Local&quot;,unblk_list=[],induced=false,call_st=0,call_et=0,call_exec_t=0,call_dur=4}]}]},{comp_name=&quot;Comp5&quot;,cmq=[{opname=&quot;on_timer&quot;,op_node=&quot;Sat1&quot;,op_comp=&quot;Comp5&quot;,op_pn=&quot;Part1&quot;,op_prio=60,op_dl=10,op_st=0,op_dv=false,op_calls=[{port_type=&quot;Local&quot;,port_name=&quot;Local&quot;,unblk_list=[],induced=false,call_st=0,call_et=0,call_exec_t=0,call_dur=4}]}]}]},{cmq_part=&quot;Part2&quot;,cmq_list=[]},{cmq_part=&quot;Part3&quot;,cmq_list=[]},{cmq_part=&quot;Part4&quot;,cmq_list=[]},{cmq_part=&quot;Part5&quot;,cmq_list=[]}]}];
val timers = [{t_nid=&quot;Sat1&quot;,t_pr=100,t_off=100,t_op={opname=&quot;on_timer&quot;,op_node=&quot;Sat1&quot;,op_comp=&quot;Comp1&quot;,op_pn=&quot;Part1&quot;,op_prio=60,op_dl=10,op_st=0,op_dv=false,op_calls=[{port_type=&quot;Local&quot;,port_name=&quot;Local&quot;,unblk_list=[],induced=false,call_st=0,call_et=0,call_exec_t=0,call_dur=4}]}},{t_nid=&quot;Sat1&quot;,t_pr=100,t_off=100,t_op={opname=&quot;on_timer&quot;,op_node=&quot;Sat1&quot;,op_comp=&quot;Comp2&quot;,op_pn=&quot;Part1&quot;,op_prio=60,op_dl=10,op_st=0,op_dv=false,op_calls=[{port_type=&quot;Local&quot;,port_name=&quot;Local&quot;,unblk_list=[],induced=false,call_st=0,call_et=0,call_exec_t=0,call_dur=4}]}},{t_nid=&quot;Sat1&quot;,t_pr=100,t_off=100,t_op={opname=&quot;on_timer&quot;,op_node=&quot;Sat1&quot;,op_comp=&quot;Comp3&quot;,op_pn=&quot;Part1&quot;,op_prio=60,op_dl=10,op_st=0,op_dv=false,op_calls=[{port_type=&quot;Local&quot;,port_name=&quot;Local&quot;,unblk_list=[],induced=false,call_st=0,call_et=0,call_exec_t=0,call_dur=4}]}},{t_nid=&quot;Sat1&quot;,t_pr=100,t_off=100,t_op={opname=&quot;on_timer&quot;,op_node=&quot;Sat1&quot;,op_comp=&quot;Comp4&quot;,op_pn=&quot;Part1&quot;,op_prio=60,op_dl=10,op_st=0,op_dv=false,op_calls=[{port_type=&quot;Local&quot;,port_name=&quot;Local&quot;,unblk_list=[],induced=false,call_st=0,call_et=0,call_exec_t=0,call_dur=4}]}},{t_nid=&quot;Sat1&quot;,t_pr=100,t_off=100,t_op={opname=&quot;on_timer&quot;,op_node=&quot;Sat1&quot;,op_comp=&quot;Comp5&quot;,op_pn=&quot;Part1&quot;,op_prio=60,op_dl=10,op_st=0,op_dv=false,op_calls=[{port_type=&quot;Local&quot;,port_name=&quot;Local&quot;,unblk_list=[],induced=false,call_st=0,call_et=0,call_exec_t=0,call_dur=4}]}}];
val opn_list = [];
val ths = [];
(schedule_guard nc ncmq_list nths_list timers opn_list ths);</text>
      </Aux>
    </page>
    <instances>
      <instance id="ID2149"
                page="ID6"/>
    </instances>
    <options>
      <option name="realtimestamp">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="fair_be">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="global_fairness">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="outputdirectory">
        <value>
          <text>&lt;same as model&gt;</text>
        </value>
      </option>
      <option name="repavg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repciavg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repcount">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repfirstval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="replastval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repmax">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repmin">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repssquare">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repssqdev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repstddev">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repsum">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repvariance">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="avg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="ciavg">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="count">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="firstval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="lastval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="max">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="min">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="ssquare">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="ssqdev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="stddev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="sum">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="variance">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="firstupdate">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="interval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="lastupdate">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedavg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedciavg">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedcount">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedfirstval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedlastval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedmax">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedmin">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedssquare">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedssqdev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedstddev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedsum">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedvariance">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
    </options>
    <binders>
      <cpnbinder id="ID2222"
                 x="222"
                 y="59"
                 width="1787"
                 height="912">
        <sheets>
          <cpnsheet id="ID2215"
                    panx="-202.400000"
                    pany="1023.400000"
                    zoom="0.800000"
                    instance="ID2149">
            <zorder>
              <position value="0"/>
            </zorder>
          </cpnsheet>
        </sheets>
        <zorder>
          <position value="0"/>
        </zorder>
      </cpnbinder>
    </binders>
    <monitorblock name="Monitors"/>
    <IndexNode expanded="true">
      <IndexNode expanded="false"/>
      <IndexNode expanded="false"/>
      <IndexNode expanded="false">
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false">
          <IndexNode expanded="false">
            <IndexNode expanded="false">
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
            </IndexNode>
            <IndexNode expanded="false">
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
            </IndexNode>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
          </IndexNode>
        </IndexNode>
      </IndexNode>
      <IndexNode expanded="false">
        <IndexNode expanded="false"/>
      </IndexNode>
      <IndexNode expanded="true">
        <IndexNode expanded="true">
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="true"/>
        </IndexNode>
        <IndexNode expanded="true">
          <IndexNode expanded="false">
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="true"/>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
          </IndexNode>
        </IndexNode>
        <IndexNode expanded="true">
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
        </IndexNode>
      </IndexNode>
      <IndexNode expanded="true"/>
      <IndexNode expanded="true"/>
    </IndexNode>
  </cpnet>
</workspaceElements>