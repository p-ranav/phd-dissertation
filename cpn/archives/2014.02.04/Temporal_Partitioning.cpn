<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE workspaceElements PUBLIC "-//CPN//DTD CPNXML 1.0//EN" "http://cpntools.org/DTD/6/cpn.dtd">

<workspaceElements>
  <generator tool="CPN Tools"
             version="4.0.0"
             format="6"/>
  <cpnet>
    <globbox>
      <block id="ID1412310166">
        <id>Standard priorities</id>
        <ml id="ID1412310255">val P_HIGH = 100;
          <layout>val P_HIGH = 100;</layout>
        </ml>
        <ml id="ID1412310292">val P_NORMAL = 1000;
          <layout>val P_NORMAL = 1000;</layout>
        </ml>
        <ml id="ID1412310322">val P_LOW = 10000;
          <layout>val P_LOW = 10000;</layout>
        </ml>
      </block>
      <block id="ID1">
        <id>Standard declarations</id>
        <color id="ID85042">
          <id>UNIT</id>
          <unit/>
          <layout>colset UNIT = unit;</layout>
        </color>
        <color id="ID4">
          <id>BOOL</id>
          <bool/>
        </color>
        <color id="ID3">
          <id>INT</id>
          <int/>
        </color>
        <color id="ID1417910916">
          <id>LIST_INT</id>
          <list>
            <id>INT</id>
          </list>
          <layout>colset LIST_INT = list INT;</layout>
        </color>
        <color id="ID1412312409">
          <id>INTINF</id>
          <intinf/>
          <layout>colset INTINF = intinf;</layout>
        </color>
        <color id="ID1412312425">
          <id>TIME</id>
          <time/>
          <layout>colset TIME = time;</layout>
        </color>
        <color id="ID1412322990">
          <id>REAL</id>
          <real/>
          <layout>colset REAL = real;</layout>
        </color>
        <color id="ID5">
          <id>STRING</id>
          <string/>
        </color>
      </block>
      <block id="ID1420130910">
        <id>Analysis_Model_Functions</id>
        <block id="ID1417892392">
          <id>Global_Functions</id>
          <ml id="ID1417892891">fun intTime() = IntInf.toInt (time());
            <layout>fun intTime() = IntInf.toInt (time());</layout>
          </ml>
        </block>
        <block id="ID1417900605">
          <id>Clock_Tick</id>
          <block id="ID1417901156">
            <id>Color_Sets</id>
            <color id="ID1417902015">
              <id>tick</id>
              <timed/>
              <enum>
                <id>tick</id>
              </enum>
              <layout>colset tick = with tick timed;</layout>
            </color>
          </block>
        </block>
        <block id="ID1417889205">
          <id>Temporal_Partition_Scheduling</id>
          <block id="ID1417889448">
            <id>Color_Sets</id>
            <color id="ID1417890028">
              <id>minor_frame</id>
              <timed/>
              <record>
                <recordfield>
                  <id>pn</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>mf_tc</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>mf_mtc</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>mf_pr</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>mf_off</id>
                  <id>INT</id>
                </recordfield>
              </record>
              <layout>colset minor_frame = record pn:INT * 
                                             mf_tc:INT * mf_mtc:INT * 
                                             mf_pr:INT * 
                                             mf_off:INT timed;</layout>
            </color>
          </block>
          <block id="ID1417889627">
            <id>Variables</id>
            <var id="ID1417890253">
              <type>
                <id>minor_frame</id>
              </type>
              <id>mf</id>
              <layout>var mf:minor_frame;</layout>
            </var>
            <var id="ID1417890489">
              <type>
                <id>INT</id>
              </type>
              <id>pn</id>
              <id>mf_tc</id>
              <id>mf_mtc</id>
              <id>mf_pr</id>
              <id>mf_off</id>
              <layout>var pn,mf_tc,mf_mtc,mf_pr,mf_off:INT;</layout>
            </var>
          </block>
        </block>
        <block id="ID1417907700">
          <id>Component_Operations</id>
          <block id="ID1417909090">
            <id>Color_Sets</id>
            <color id="ID1418630648">
              <id>op_type</id>
              <enum>
                <id>TIMER_OP</id>
                <id>RMI_OP</id>
                <id>AMI_OP</id>
                <id>DDS_OP</id>
              </enum>
              <layout>colset op_type = with TIMER_OP | RMI_OP | AMI_OP | DDS_OP;</layout>
            </color>
            <color id="ID1418634887">
              <id>call_type</id>
              <enum>
                <id>RMI_c</id>
                <id>RMI_s</id>
                <id>AMI_c</id>
                <id>AMI_s</id>
                <id>DDS</id>
                <id>CALC</id>
              </enum>
              <layout>colset call_type = with RMI_c | RMI_s | AMI_c | AMI_s | DDS | CALC;</layout>
            </color>
            <color id="ID1418079081">
              <id>call</id>
              <record>
                <recordfield>
                  <id>call_id</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>call_type</id>
                  <id>call_type</id>
                </recordfield>
                <recordfield>
                  <id>call_op_id</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>blk_list</id>
                  <id>LIST_INT</id>
                </recordfield>
                <recordfield>
                  <id>unblk_list</id>
                  <id>LIST_INT</id>
                </recordfield>
                <recordfield>
                  <id>q_t</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>pr_t</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>call_st</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>call_et</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>call_blkt</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>call_tc</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>call_mtc</id>
                  <id>INT</id>
                </recordfield>
              </record>
              <layout>colset call = record call_id:INT * call_type:call_type * call_op_id:INT * 
                               blk_list:LIST_INT * unblk_list:LIST_INT * 
                               q_t:INT * pr_t:INT *
                               call_st:INT * call_et:INT * call_blkt:INT *   
                               call_tc:INT * call_mtc:INT;</layout>
            </color>
            <color id="ID1418082313">
              <id>call_list</id>
              <list>
                <id>call</id>
              </list>
              <layout>colset call_list = list call;</layout>
            </color>
            <color id="ID1418084488">
              <id>opn</id>
              <record>
                <recordfield>
                  <id>op_id</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>op_type</id>
                  <id>op_type</id>
                </recordfield>
                <recordfield>
                  <id>op_tid</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>op_pn</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>op_prio</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>op_dl</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>op_wt</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>op_st</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>op_et</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>op_tc</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>op_calls</id>
                  <id>call_list</id>
                </recordfield>
              </record>
              <layout>colset opn = record op_id:INT * op_type:op_type * op_tid:INT * op_pn:INT * 
                               op_prio:INT * op_dl:INT * op_wt:INT * op_st:INT * op_et:INT * op_tc:INT * 
                               op_calls:call_list;</layout>
            </color>
            <color id="ID1418089976">
              <id>opn_list</id>
              <list>
                <id>opn</id>
              </list>
              <layout>colset opn_list = list opn;</layout>
            </color>
            <color id="ID1419363197">
              <id>induce_op</id>
              <record>
                <recordfield>
                  <id>i_call_id</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>i_op</id>
                  <id>opn</id>
                </recordfield>
              </record>
              <layout>colset induce_op = record i_call_id:INT * 
                                          i_op:opn;</layout>
            </color>
          </block>
          <block id="ID1417908389">
            <id>Variables</id>
            <var id="ID1420254203">
              <type>
                <id>opn</id>
              </type>
              <id>opn</id>
              <layout>var opn:opn;</layout>
            </var>
            <var id="ID1419422777">
              <type>
                <id>induce_op</id>
              </type>
              <id>i_opn</id>
              <layout>var i_opn:induce_op;</layout>
            </var>
          </block>
        </block>
        <block id="ID1417902305">
          <id>Component_Worker_Threads</id>
          <block id="ID1417905048">
            <id>Color_Sets</id>
            <color id="ID1417906024">
              <id>state</id>
              <enum>
                <id>passive</id>
                <id>ready</id>
                <id>running</id>
                <id>blocked</id>
                <id>completed</id>
              </enum>
              <layout>colset state = with passive | ready | running | blocked | completed;</layout>
            </color>
            <color id="ID1418087771">
              <id>thread</id>
              <record>
                <recordfield>
                  <id>th_tid</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>th_pn</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>th_prio</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>th_state</id>
                  <id>state</id>
                </recordfield>
                <recordfield>
                  <id>th_cmq_len</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>th_opn_list</id>
                  <id>opn_list</id>
                </recordfield>
              </record>
              <layout>colset thread = record th_tid:INT * th_pn:INT * th_prio:INT * 
                                    th_state:state * th_cmq_len:INT * th_opn_list:opn_list;</layout>
            </color>
            <color id="ID1418093304">
              <id>threads</id>
              <list>
                <id>thread</id>
              </list>
              <layout>colset threads = list thread;</layout>
            </color>
            <color id="ID1418095541">
              <id>part_ready_threads</id>
              <timed/>
              <record>
                <recordfield>
                  <id>pn</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>ths</id>
                  <id>threads</id>
                </recordfield>
              </record>
              <layout>colset part_ready_threads = record pn:INT * ths:threads timed;</layout>
            </color>
          </block>
          <block id="ID1417904419">
            <id>Variables</id>
            <var id="ID1418097788">
              <type>
                <id>thread</id>
              </type>
              <id>th</id>
              <id>th1</id>
              <layout>var th,th1:thread;</layout>
            </var>
            <var id="ID1418100046">
              <type>
                <id>threads</id>
              </type>
              <id>ths</id>
              <id>ths1</id>
              <layout>var ths,ths1:threads;</layout>
            </var>
          </block>
          <block id="ID1417902892">
            <id>Functions</id>
            <block id="ID1418785720">
              <id>Enqueue_Functions</id>
              <ml id="ID1418792708">fun pnq {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list} [] = 
                 [{th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}]
    | pnq {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list} 
            ({th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,th_opn_list=th_opn_list2}::queue) = 
       if (th_prio &gt; th_prio2) then 
               {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list} :: 
              ({th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,th_opn_list=th_opn_list2}::queue)
       else {th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,th_opn_list=th_opn_list2}::
               (pnq {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list} queue);
                <layout>fun pnq {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list} [] = 
                 [{th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}]
    | pnq {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list} 
            ({th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,th_opn_list=th_opn_list2}::queue) = 
       if (th_prio &gt; th_prio2) then 
               {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list} :: 
              ({th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,th_opn_list=th_opn_list2}::queue)
       else {th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,th_opn_list=th_opn_list2}::
               (pnq {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list} queue);</layout>
              </ml>
            </block>
            <block id="ID1418015910">
              <id>Pick_Next_Task_Functions</id>
              <ml id="ID1418445527">fun pick_next ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::queue) = 
         if (th_opn_list &lt;&gt; []) then 
             {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}
        else
              (pick_next queue);
                <layout>fun pick_next ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::queue) = 
         if (th_opn_list &lt;&gt; []) then 
             {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}
        else
              (pick_next queue);</layout>
              </ml>
              <ml id="ID1418548597">fun op_st_check {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,op_calls=op_calls}::rest)} = 
           if (op_tc = 0) then 
                   {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=intTime(),op_et=op_et,op_tc=op_tc,op_calls=op_calls}::rest)}
           else 
                   {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,op_calls=op_calls}::rest)};
                <layout>fun op_st_check {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,op_calls=op_calls}::rest)} = 
           if (op_tc = 0) then 
                   {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=intTime(),op_et=op_et,op_tc=op_tc,op_calls=op_calls}::rest)}
           else 
                   {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,op_calls=op_calls}::rest)};</layout>
              </ml>
              <ml id="ID1420092047">fun call_st_check {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)} = 
                            if (call_tc1 = 0) then 
                            {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=intTime(), call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)}
                             else 
                            {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)};
                <layout>fun call_st_check {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)} = 
                            if (call_tc1 = 0) then 
                            {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=intTime(), call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)}
                             else 
                            {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)};</layout>
              </ml>
              <ml id="ID1418582897">fun all_threads_passive [] = true 
     |all_threads_passive ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::queue)  = 
                  if(th_opn_list &lt;&gt; []) then false else
                     true andalso (all_threads_passive queue);
                <layout>fun all_threads_passive [] = true 
     |all_threads_passive ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::queue)  = 
                  if(th_opn_list &lt;&gt; []) then false else
                     true andalso (all_threads_passive queue);</layout>
              </ml>
            </block>
            <block id="ID1418032122">
              <id>Component_Operation_Functions</id>
              <ml id="ID1418823252">fun op_blk_check {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                               call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}::rest_calls)}::rest_ops)} = 
                        if (contains blk_list [th_tid] = true andalso (call_tc + 1 = q_t orelse call_tc = q_t)) then true else false;
                <layout>fun op_blk_check {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                               call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}::rest_calls)}::rest_ops)} = 
                        if (contains blk_list [th_tid] = true andalso (call_tc + 1 = q_t orelse call_tc = q_t)) then true else false;</layout>
              </ml>
              <ml id="ID1418871237">fun call_tc_check {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                       call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}::rest_calls)}::rest_ops)} = 
                 if (call_tc + 1 = call_mtc) then 
                      {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=rest_calls}::rest_ops)}
                 else 
                       {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                         call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc+1,call_mtc=call_mtc}::rest_calls)}::rest_ops)};
                <layout>fun call_tc_check {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                       call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}::rest_calls)}::rest_ops)} = 
                 if (call_tc + 1 = call_mtc) then 
                      {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=rest_calls}::rest_ops)}
                 else 
                       {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                         call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc+1,call_mtc=call_mtc}::rest_calls)}::rest_ops)};</layout>
              </ml>
              <ml id="ID1418885882">fun op_check {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                         th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}::rest_ops)} = 
                 if (op_calls = []) then 
                 {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len-1,
                         th_opn_list=rest_ops}
                 else
                 {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                         th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc+1, op_calls=op_calls}::rest_ops)};
                <layout>fun op_check {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                         th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}::rest_ops)} = 
                 if (op_calls = []) then 
                 {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len-1,
                         th_opn_list=rest_ops}
                 else
                 {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                         th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc+1, op_calls=op_calls}::rest_ops)};</layout>
              </ml>
              <ml id="ID1419162053">fun op_complete {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                         th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}::rest_ops)} = 
                 if (op_calls=[]) then 
                        1`{op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=intTime()+1,op_tc=(intTime() + 1 - op_st), op_calls=op_calls}
                 else empty;
                <layout>fun op_complete {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                         th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}::rest_ops)} = 
                 if (op_calls=[]) then 
                        1`{op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=intTime()+1,op_tc=(intTime() + 1 - op_st), op_calls=op_calls}
                 else empty;</layout>
              </ml>
              <ml id="ID1419179204">fun op_wait_time_inc [] = [] 
   | op_wait_time_inc ({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}::rest_ops) = 
                                       {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt+1,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}::
                                                    (op_wait_time_inc rest_ops);
                <layout>fun op_wait_time_inc [] = [] 
   | op_wait_time_inc ({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}::rest_ops) = 
                                       {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt+1,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}::
                                                    (op_wait_time_inc rest_ops);</layout>
              </ml>
              <ml id="ID1419187202">fun th_wt_inc {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len, th_opn_list=(th_opn::rest)} = 
                       {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len, th_opn_list=th_opn::(op_wait_time_inc rest)};
                <layout>fun th_wt_inc {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len, th_opn_list=(th_opn::rest)} = 
                       {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len, th_opn_list=th_opn::(op_wait_time_inc rest)};</layout>
              </ml>
            </block>
            <block id="ID1419517026">
              <id>Operation_Induction</id>
              <ml id="ID1419522155">fun induce_check {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                                 th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                       op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                             call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}::rest_calls)}::rest_ops)}
                             {i_call_id=i_call_id, i_op=i_op} = 
                    if (call_tc + 1 = q_t andalso i_call_id = call_id) then true else false;
                <layout>fun induce_check {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                                 th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                       op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                             call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}::rest_calls)}::rest_ops)}
                             {i_call_id=i_call_id, i_op=i_op} = 
                    if (call_tc + 1 = q_t andalso i_call_id = call_id) then true else false;</layout>
              </ml>
              <ml id="ID1419603288">fun induce_pnq {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls} [] = 
                           [{op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}]
  | induce_pnq {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}
                          [{op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2, op_calls=op_calls2}] = 
                   [{op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2, op_calls=op_calls2},
                          {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}]
  | induce_pnq {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}
                          ({op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2, op_calls=op_calls2}::
                             {op_id=op_id3,op_type=op_type3,op_tid=op_tid3,op_pn=op_pn3,op_prio=op_prio3,op_dl=op_dl3,op_wt=op_wt3,op_st=op_st3,op_et=op_et3,op_tc=op_tc3, op_calls=op_calls3}::rest_ops) = 
                     if (op_prio &gt; op_prio3) then 
                        {op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2, op_calls=op_calls2}::
                       {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}::
                        ({op_id=op_id3,op_type=op_type3,op_tid=op_tid3,op_pn=op_pn3,op_prio=op_prio3,op_dl=op_dl3,op_wt=op_wt3,op_st=op_st3,op_et=op_et3,op_tc=op_tc3, op_calls=op_calls3}::rest_ops)
                     else
                        {op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2, op_calls=op_calls2}::
                         {op_id=op_id3,op_type=op_type3,op_tid=op_tid3,op_pn=op_pn3,op_prio=op_prio3,op_dl=op_dl3,op_wt=op_wt3,op_st=op_st3,op_et=op_et3,op_tc=op_tc3, op_calls=op_calls3}::
                        (induce_pnq {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls} rest_ops);
                <layout>fun induce_pnq {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls} [] = 
                           [{op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}]
  | induce_pnq {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}
                          [{op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2, op_calls=op_calls2}] = 
                   [{op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2, op_calls=op_calls2},
                          {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}]
  | induce_pnq {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}
                          ({op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2, op_calls=op_calls2}::
                             {op_id=op_id3,op_type=op_type3,op_tid=op_tid3,op_pn=op_pn3,op_prio=op_prio3,op_dl=op_dl3,op_wt=op_wt3,op_st=op_st3,op_et=op_et3,op_tc=op_tc3, op_calls=op_calls3}::rest_ops) = 
                     if (op_prio &gt; op_prio3) then 
                        {op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2, op_calls=op_calls2}::
                       {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}::
                        ({op_id=op_id3,op_type=op_type3,op_tid=op_tid3,op_pn=op_pn3,op_prio=op_prio3,op_dl=op_dl3,op_wt=op_wt3,op_st=op_st3,op_et=op_et3,op_tc=op_tc3, op_calls=op_calls3}::rest_ops)
                     else
                        {op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2, op_calls=op_calls2}::
                         {op_id=op_id3,op_type=op_type3,op_tid=op_tid3,op_pn=op_pn3,op_prio=op_prio3,op_dl=op_dl3,op_wt=op_wt3,op_st=op_st3,op_et=op_et3,op_tc=op_tc3, op_calls=op_calls3}::
                        (induce_pnq {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls} rest_ops);</layout>
              </ml>
              <ml id="ID1419537799">fun find_thread  {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls} [] = []
 |    find_thread {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}
                          ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::rest_ths) = 
            if (op_tid = th_tid) then 
                   ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len+1,
                           th_opn_list=(induce_pnq {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls} th_opn_list)}::rest_ths)
            else
               {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::
                    (find_thread {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls} rest_ths);
                <layout>fun find_thread  {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls} [] = []
 |    find_thread {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls}
                          ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::rest_ths) = 
            if (op_tid = th_tid) then 
                   ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len+1,
                           th_opn_list=(induce_pnq {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls} th_opn_list)}::rest_ths)
            else
               {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::
                    (find_thread {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, op_calls=op_calls} rest_ths);</layout>
              </ml>
              <ml id="ID1420495229">fun is_thread_ready tid2 [] = false
     | is_thread_ready tid2 ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::rest_ths) = 
            if (th_tid = tid2) then true 
            else 
                  is_thread_ready tid2 rest_ths;
                <layout>fun is_thread_ready tid2 [] = false
     | is_thread_ready tid2 ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::rest_ths) = 
            if (th_tid = tid2) then true 
            else 
                  is_thread_ready tid2 rest_ths;</layout>
              </ml>
              <ml id="ID1420520514">fun enqueue_i_op {i_call_id=i_call_id, i_op=i_op} {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list} = 
          {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=(induce_pnq i_op th_opn_list)};;
                <layout>fun enqueue_i_op {i_call_id=i_call_id, i_op=i_op} {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list} = 
          {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=(induce_pnq i_op th_opn_list)};;</layout>
              </ml>
            </block>
            <block id="ID1420046678">
              <id>Unblock_Thread</id>
              <ml id="ID1420060760">fun is_call_complete {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                               call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)}
                                 {th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,
                                     th_opn_list=({op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2,
                                     op_calls=({call_id=call_id2,call_type=call_type2,call_op_id=call_op_id2,blk_list=blk_list2,unblk_list=unblk_list2,q_t=q_t2,pr_t=pr_t2,
                                                        call_st=call_st2, call_et=call_et2,call_blkt=call_blkt2,call_tc=call_tc2,call_mtc=call_mtc2}::rest_calls2)}::rest_ops2)} =  
                            if (call_tc1 + 1 = call_mtc1 andalso (contains unblk_list1 [th_tid2] = true ) ) then true else false;
                <layout>fun is_call_complete {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                               call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)}
                                 {th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,
                                     th_opn_list=({op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2,
                                     op_calls=({call_id=call_id2,call_type=call_type2,call_op_id=call_op_id2,blk_list=blk_list2,unblk_list=unblk_list2,q_t=q_t2,pr_t=pr_t2,
                                                        call_st=call_st2, call_et=call_et2,call_blkt=call_blkt2,call_tc=call_tc2,call_mtc=call_mtc2}::rest_calls2)}::rest_ops2)} =  
                            if (call_tc1 + 1 = call_mtc1 andalso (contains unblk_list1 [th_tid2] = true ) ) then true else false;</layout>
              </ml>
              <ml id="ID1420046853">fun add_blking_time {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)}

                                {th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,
                                     th_opn_list=({op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2,
                                     op_calls=({call_id=call_id2,call_type=call_type2,call_op_id=call_op_id2,blk_list=blk_list2,unblk_list=unblk_list2,q_t=q_t2,pr_t=pr_t2,
                                                         call_st=call_st2, call_et=call_et2,call_blkt=call_blkt2,call_tc=call_tc2,call_mtc=call_mtc2}::rest_calls2)}::rest_ops2)} = 
                          if (call_tc1 + 1 = call_mtc1 andalso (contains unblk_list1 [th_tid2] = true )) then 
                                  {th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,
                                     th_opn_list=({op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2+(intTime() + 1 - call_st2),
                                     op_calls=({call_id=call_id2,call_type=call_type2,call_op_id=call_op_id2,blk_list=blk_list2,unblk_list=unblk_list2,q_t=q_t2,pr_t=pr_t2,
                                                          call_st=call_st2, call_et=call_et2,call_blkt=call_blkt2,call_tc=call_tc2+ (intTime() + 1 - call_st2),call_mtc=call_mtc2+(intTime() + 1 - call_st2)}::rest_calls2)}::rest_ops2)}
                          else
                                   {th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,
                                     th_opn_list=({op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2,
                                     op_calls=({call_id=call_id2,call_type=call_type2,call_op_id=call_op_id2,blk_list=blk_list2,unblk_list=unblk_list2,q_t=q_t2,pr_t=pr_t2,
                                                          call_st=call_st2, call_et=call_et2,call_blkt=call_blkt2,call_tc=call_tc2,call_mtc=call_mtc2}::rest_calls2)}::rest_ops2)};
                <layout>fun add_blking_time {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)}

                                {th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,
                                     th_opn_list=({op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2,
                                     op_calls=({call_id=call_id2,call_type=call_type2,call_op_id=call_op_id2,blk_list=blk_list2,unblk_list=unblk_list2,q_t=q_t2,pr_t=pr_t2,
                                                         call_st=call_st2, call_et=call_et2,call_blkt=call_blkt2,call_tc=call_tc2,call_mtc=call_mtc2}::rest_calls2)}::rest_ops2)} = 
                          if (call_tc1 + 1 = call_mtc1 andalso (contains unblk_list1 [th_tid2] = true )) then 
                                  {th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,
                                     th_opn_list=({op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2+(intTime() + 1 - call_st2),
                                     op_calls=({call_id=call_id2,call_type=call_type2,call_op_id=call_op_id2,blk_list=blk_list2,unblk_list=unblk_list2,q_t=q_t2,pr_t=pr_t2,
                                                          call_st=call_st2, call_et=call_et2,call_blkt=call_blkt2,call_tc=call_tc2+ (intTime() + 1 - call_st2),call_mtc=call_mtc2+(intTime() + 1 - call_st2)}::rest_calls2)}::rest_ops2)}
                          else
                                   {th_tid=th_tid2,th_pn=th_pn2,th_prio=th_prio2,th_state=th_state2,th_cmq_len=th_cmq_len2,
                                     th_opn_list=({op_id=op_id2,op_type=op_type2,op_tid=op_tid2,op_pn=op_pn2,op_prio=op_prio2,op_dl=op_dl2,op_wt=op_wt2,op_st=op_st2,op_et=op_et2,op_tc=op_tc2,
                                     op_calls=({call_id=call_id2,call_type=call_type2,call_op_id=call_op_id2,blk_list=blk_list2,unblk_list=unblk_list2,q_t=q_t2,pr_t=pr_t2,
                                                          call_st=call_st2, call_et=call_et2,call_blkt=call_blkt2,call_tc=call_tc2,call_mtc=call_mtc2}::rest_calls2)}::rest_ops2)};</layout>
              </ml>
            </block>
            <block id="ID1420161895">
              <id>AMI_Helper_Functions</id>
              <ml id="ID1420162611">fun isAMI {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                               call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}::rest_calls)}::rest_ops)} = 
           if (call_type = AMI_c andalso call_tc + 1 = q_t) then 
                    1`{op_id=op_id,op_type=AMI_OP,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                       op_calls=[{call_id=call_id,call_type=AMI_c,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                               call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc+1,call_mtc=call_mtc}]} 
           else 
                  empty;
                <layout>fun isAMI {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                               call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}::rest_calls)}::rest_ops)} = 
           if (call_type = AMI_c andalso call_tc + 1 = q_t) then 
                    1`{op_id=op_id,op_type=AMI_OP,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                       op_calls=[{call_id=call_id,call_type=AMI_c,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                               call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc+1,call_mtc=call_mtc}]} 
           else 
                  empty;</layout>
              </ml>
              <ml id="ID1420172668">fun remv_AMI {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=[]}::rest_ops)} = 
                       {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=[]}::rest_ops)}

   | remv_AMI {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                               call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}::rest_calls)}::rest_ops)} = 
             if (call_type = AMI_c andalso call_tc = q_t) then 
                       {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=rest_calls}::rest_ops)}
               else 
                    {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                               call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}::rest_calls)}::rest_ops)};
                <layout>fun remv_AMI {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=[]}::rest_ops)} = 
                       {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=[]}::rest_ops)}

   | remv_AMI {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                               call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}::rest_calls)}::rest_ops)} = 
             if (call_type = AMI_c andalso call_tc = q_t) then 
                       {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=rest_calls}::rest_ops)}
               else 
                    {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                       th_opn_list=({op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                 op_calls=({call_id=call_id,call_type=call_type,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                               call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}::rest_calls)}::rest_ops)};</layout>
              </ml>
              <ml id="ID1420287479">fun isAMIs_complete {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                               call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)}
                                 {op_id=op_id,op_type=AMI_OP,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                          op_calls=[{call_id=call_id,call_type=AMI_c,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                               call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}]} = 
                            if (call_type1 = AMI_s andalso call_tc1 + 1 = call_mtc1 andalso (contains unblk_list1 [op_tid] = true)) then true else false;
                <layout>fun isAMIs_complete {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                               call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)}
                                 {op_id=op_id,op_type=AMI_OP,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                          op_calls=[{call_id=call_id,call_type=AMI_c,call_op_id=call_op_id,blk_list=blk_list,unblk_list=unblk_list,q_t=q_t,pr_t=pr_t,
                                                               call_st=call_st, call_et=call_et,call_blkt=call_blkt,call_tc=call_tc,call_mtc=call_mtc}]} = 
                            if (call_type1 = AMI_s andalso call_tc1 + 1 = call_mtc1 andalso (contains unblk_list1 [op_tid] = true)) then true else false;</layout>
              </ml>
              <ml id="ID1420307508">fun release_AMIc {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                   op_calls=[{call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}]} [] = []
 |  release_AMIc {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, 
                                   op_calls=[{call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}]}
                          ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::rest_ths) = 
            if (op_tid = th_tid) then 
                   ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                           th_opn_list=(induce_pnq {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc + (intTime() + 1 - call_st1), 
                                                    op_calls=[{call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1 + (intTime() + 1 - call_st1),call_mtc=call_mtc1 + (intTime() + 1 - call_st1)}]} th_opn_list)}::rest_ths)
            else
               {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::
                    (release_AMIc {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, 
                                                    op_calls=[{call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}]} rest_ths);
                <layout>fun release_AMIc {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc,
                                   op_calls=[{call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}]} [] = []
 |  release_AMIc {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, 
                                   op_calls=[{call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}]}
                          ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::rest_ths) = 
            if (op_tid = th_tid) then 
                   ({th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,
                           th_opn_list=(induce_pnq {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc + (intTime() + 1 - call_st1), 
                                                    op_calls=[{call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1 + (intTime() + 1 - call_st1),call_mtc=call_mtc1 + (intTime() + 1 - call_st1)}]} th_opn_list)}::rest_ths)
            else
               {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list}::
                    (release_AMIc {op_id=op_id,op_type=op_type,op_tid=op_tid,op_pn=op_pn,op_prio=op_prio,op_dl=op_dl,op_wt=op_wt,op_st=op_st,op_et=op_et,op_tc=op_tc, 
                                                    op_calls=[{call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}]} rest_ths);</layout>
              </ml>
            </block>
            <block id="ID1420401248">
              <id>Deadline_Violation</id>
              <ml id="ID1420403870">fun violation_check {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)} = 
                           if ((intTime() + 1 + op_wt1 - op_st1) &gt; op_dl1) then 
                                 true
                            else false;
                <layout>fun violation_check {th_tid=th_tid1,th_pn=th_pn1,th_prio=th_prio1,th_state=th_state1,th_cmq_len=th_cmq_len1,
                                   th_opn_list=({op_id=op_id1,op_type=op_type1,op_tid=op_tid1,op_pn=op_pn1,op_prio=op_prio1,op_dl=op_dl1,op_wt=op_wt1,op_st=op_st1,op_et=op_et1,op_tc=op_tc1,
                                   op_calls=({call_id=call_id1,call_type=call_type1,call_op_id=call_op_id1,blk_list=blk_list1,unblk_list=unblk_list1,q_t=q_t1,pr_t=pr_t1,
                                                         call_st=call_st1, call_et=call_et1,call_blkt=call_blkt1,call_tc=call_tc1,call_mtc=call_mtc1}::rest_calls1)}::rest_ops1)} = 
                           if ((intTime() + 1 + op_wt1 - op_st1) &gt; op_dl1) then 
                                 true
                            else false;</layout>
              </ml>
            </block>
          </block>
        </block>
        <block id="ID1420308653">
          <id>Timers</id>
          <block id="ID1420308730">
            <id>Color_Sets</id>
            <color id="ID1420309160">
              <id>timer_op</id>
              <timed/>
              <record>
                <recordfield>
                  <id>t_tid</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>t_pn</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>t_pr</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>t_off</id>
                  <id>INT</id>
                </recordfield>
                <recordfield>
                  <id>t_op</id>
                  <id>opn</id>
                </recordfield>
              </record>
              <layout>colset timer_op = record t_tid:INT * t_pn: INT * 
                                        t_pr:INT * t_off: INT * 
                                        t_op:opn timed;</layout>
            </color>
          </block>
          <block id="ID1420308819">
            <id>Variables</id>
            <var id="ID1420311536">
              <type>
                <id>timer_op</id>
              </type>
              <id>timer</id>
              <layout>var timer: timer_op;</layout>
            </var>
          </block>
          <block id="ID1420513821">
            <id>Functions</id>
            <ml id="ID1420514815">fun enqueue_timer_op {t_tid=t_tid, t_pn=t_pn, t_pr=t_pr, t_off=t_off, t_op=t_op} {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list} = 
          {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=(induce_pnq t_op th_opn_list)};
              <layout>fun enqueue_timer_op {t_tid=t_tid, t_pn=t_pn, t_pr=t_pr, t_off=t_off, t_op=t_op} {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=th_opn_list} = 
          {th_tid=th_tid,th_pn=th_pn,th_prio=th_prio,th_state=th_state,th_cmq_len=th_cmq_len,th_opn_list=(induce_pnq t_op th_opn_list)};</layout>
            </ml>
          </block>
        </block>
      </block>
    </globbox>
    <page id="ID6">
      <pageattr name="Analysis_Model_II"/>
      <place id="ID1417888234">
        <posattr x="732.000000"
                 y="225.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Currently_Active_Partition</text>
        <ellipse w="174.000000"
                 h="56.000000"/>
        <token x="-101.000000"
               y="32.000000"/>
        <marking x="-14.000000"
                 y="13.000000"
                 hidden="false">
          <snap snap_id="3"
                anchor.horizontal="3"
                anchor.vertical="2"/>
        </marking>
        <type id="ID1417888235">
          <posattr x="835.500000"
                   y="195.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">minor_frame</text>
        </type>
        <initmark id="ID1417888236">
          <posattr x="828.000000"
                   y="254.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0"/>
        </initmark>
      </place>
      <place id="ID1420571843">
        <posattr x="732.000000"
                 y="-31.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Schedule</text>
        <ellipse w="68.000000"
                 h="48.000000"/>
        <token x="-10.000000"
               y="17.000000"/>
        <marking x="0.000000"
                 y="0.000000"
                 hidden="false">
          <snap snap_id="0"
                anchor.horizontal="0"
                anchor.vertical="0"/>
        </marking>
        <type id="ID1420571844">
          <posattr x="797.500000"
                   y="-57.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">minor_frame</text>
        </type>
        <initmark id="ID1420571845">
          <posattr x="870.000000"
                   y="-87.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">1`{pn=1,mf_tc=0,mf_mtc=5,mf_pr=10,mf_off=0}++
1`{pn=2,mf_tc=0,mf_mtc=5,mf_pr=10,mf_off=5}</text>
        </initmark>
      </place>
      <trans id="ID1420575191"
             explicit="false">
        <posattr x="402.000000"
                 y="84.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Inactivate_Minor_Frame</text>
        <box w="158.000000"
             h="38.000000"/>
        <binding x="7.200000"
                 y="-3.000000"/>
        <cond id="ID1420575192">
          <posattr x="266.000000"
                   y="84.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">[mf_tc = mf_mtc]</text>
        </cond>
        <time id="ID1420575193">
          <posattr x="495.500000"
                   y="114.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0"/>
        </time>
        <code id="ID1420575194">
          <posattr x="515.500000"
                   y="33.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0"/>
        </code>
        <priority id="ID1420575196">
          <posattr x="295.000000"
                   y="54.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">P_HIGH</text>
        </priority>
      </trans>
      <trans id="ID1420575197"
             explicit="false">
        <posattr x="732.000000"
                 y="84.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Pick_Partition</text>
        <box w="102.000000"
             h="34.000000"/>
        <binding x="7.200000"
                 y="-3.000000"/>
        <cond id="ID1420575198">
          <posattr x="862.000000"
                   y="84.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">[intTime() = #mf_off mf]</text>
        </cond>
        <time id="ID1420575199">
          <posattr x="797.500000"
                   y="112.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0"/>
        </time>
        <code id="ID1420575200">
          <posattr x="817.500000"
                   y="35.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0"/>
        </code>
        <priority id="ID1420575202">
          <posattr x="654.000000"
                   y="56.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">P_LOW</text>
        </priority>
      </trans>
      <trans id="ID1420578578"
             explicit="false">
        <posattr x="733.000000"
                 y="462.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <text>Thread_Execution</text>
        <box w="150.000000"
             h="40.000000"/>
        <binding x="7.200000"
                 y="-3.000000"/>
        <cond id="ID1420578579">
          <posattr x="649.000000"
                   y="493.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0"/>
        </cond>
        <time id="ID1420578580">
          <posattr x="826.500000"
                   y="493.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">@+1</text>
        </time>
        <code id="ID1420578581">
          <posattr x="842.500000"
                   y="410.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0"/>
        </code>
        <priority id="ID1420578583">
          <posattr x="620.000000"
                   y="431.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0"/>
        </priority>
      </trans>
      <arc id="ID1420575260"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1420575197"/>
        <placeend idref="ID1417888234"/>
        <annot id="ID1420575261">
          <posattr x="720.500000"
                   y="149.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">mf</text>
        </annot>
      </arc>
      <arc id="ID1420575264"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1420575191"/>
        <placeend idref="ID1417888234"/>
        <bendpoint id="ID1420577279"
                   serial="1">
          <posattr x="402.000000"
                   y="225.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1420575265">
          <posattr x="302.000000"
                   y="195.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">{pn=pn,
  mf_tc=mf_tc,mf_mtc=mf_mtc,
  mf_pr=mf_pr,mf_off=mf_off}</text>
        </annot>
      </arc>
      <arc id="ID1420575273"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1420575197"/>
        <placeend idref="ID1420571843"/>
        <annot id="ID1420575274">
          <posattr x="744.500000"
                   y="30.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">mf</text>
        </annot>
      </arc>
      <arc id="ID1420575277"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1420575191"/>
        <placeend idref="ID1420571843"/>
        <bendpoint id="ID1420577588"
                   serial="1">
          <posattr x="402.000000"
                   y="-31.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1420575278">
          <posattr x="411.000000"
                   y="-49.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">{pn=pn,
  mf_tc=0,mf_mtc=mf_mtc,
  mf_pr=mf_pr,mf_off=mf_off+mf_pr}</text>
        </annot>
      </arc>
      <arc id="ID1420579595"
           orientation="PtoT"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1420578578"/>
        <placeend idref="ID1417888234"/>
        <bendpoint id="ID1420581836"
                   serial="1">
          <posattr x="756.000000"
                   y="294.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1420581207">
          <posattr x="767.500000"
                   y="347.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">mf</text>
        </annot>
      </arc>
      <arc id="ID1420582297"
           orientation="TtoP"
           order="1">
        <posattr x="0.000000"
                 y="0.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <arrowattr headsize="1.200000"
                   currentcyckle="2"/>
        <transend idref="ID1420578578"/>
        <placeend idref="ID1417888234"/>
        <bendpoint id="ID1420582481"
                   serial="1">
          <posattr x="714.000000"
                   y="316.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
        </bendpoint>
        <annot id="ID1420582298">
          <posattr x="577.000000"
                   y="351.000000"/>
          <fillattr colour="White"
                    pattern="Solid"
                    filled="false"/>
          <lineattr colour="Black"
                    thick="0"
                    type="Solid"/>
          <textattr colour="Black"
                    bold="false"/>
          <text tool="CPN Tools"
                version="4.0.0">minor_frame.set_mf_tc mf (#mf_tc mf + 1)</text>
        </annot>
      </arc>
      <constraints/>
      <hguideline id="ID1419894461"
                  y="-876.000000"/>
      <hguideline id="ID1419896442"
                  y="-1042.000000"/>
      <Aux id="ID1420123377">
        <posattr x="-42.000000"
                 y="-462.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>use (&quot;C:/Program Files (x86)/CPN Tools/OGMLfiles/ASKCTLloader.sml&quot;);</text>
      </Aux>
      <Aux id="ID1420123787">
        <posattr x="-42.000000"
                 y="-489.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>ListDeadTIs();</text>
      </Aux>
      <Aux id="ID1420124547">
        <posattr x="-42.000000"
                 y="-546.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>TIsDead ([TI.Temporal_Partition_Scheduling&apos;Pick_Partition 1], 1);</text>
      </Aux>
      <Aux id="ID1420126284">
        <posattr x="-42.000000"
                 y="-517.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>TIsDead ([TI.Analysis_Model_II&apos;Pick_Next_Thread 1], 1);</text>
      </Aux>
      <Aux id="ID1420127726">
        <posattr x="69.000000"
                 y="-420.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>STATE_SPACE_ANALYSIS:</text>
      </Aux>
      <Aux id="ID1420128626">
        <posattr x="210.000000"
                 y="-489.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>ListDeadMarkings();</text>
      </Aux>
      <Aux id="ID1420152996">
        <posattr x="304.250000"
                 y="-728.375000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>PRINT_DEAD_MARKING(s)</text>
      </Aux>
      <Aux id="ID1420153077">
        <posattr x="304.000000"
                 y="-756.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>print(NodeDescriptor (hd (SearchNodes (EntireGraph, fn n =&gt; (length(OutArcs(n)) = 0), NoLimit, fn n =&gt; n, [], op ::))))</text>
      </Aux>
      <Aux id="ID1420153469">
        <posattr x="294.000000"
                 y="-840.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>SearchNodes (EntireGraph, 
                       fn n =&gt; size(Mark.Analysis_Model_II&apos;Currently_Running_Thread 1 n) &gt; 0, 
                       NoLimit, 
                       fn n =&gt; n, 
                       [], 
                       op ::)</text>
      </Aux>
      <Aux id="ID1420157326">
        <posattr x="168.000000"
                 y="-630.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>Mark.Analysis_Model_II&apos;Currently_Active_Partition 1 1</text>
      </Aux>
    </page>
    <instances>
      <instance id="ID2149"
                page="ID6"/>
    </instances>
    <options>
      <option name="realtimestamp">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="fair_be">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="global_fairness">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="outputdirectory">
        <value>
          <text>&lt;same as model&gt;</text>
        </value>
      </option>
      <option name="extensions.10003.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10007.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10002.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10008.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10004.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10001.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10006.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10005.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10007.options.discover">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repavg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repciavg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repcount">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repfirstval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="replastval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repmax">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repmin">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repssquare">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repssqdev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repstddev">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repsum">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repvariance">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="avg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="ciavg">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="count">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="firstval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="lastval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="max">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="min">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="ssquare">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="ssqdev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="stddev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="sum">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="variance">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="firstupdate">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="interval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="lastupdate">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedavg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedciavg">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedcount">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedfirstval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedlastval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedmax">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedmin">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedssquare">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedssqdev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedstddev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedsum">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedvariance">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
    </options>
    <binders>
      <cpnbinder id="ID2222"
                 x="265"
                 y="64"
                 width="1485"
                 height="863">
        <sheets>
          <cpnsheet id="ID2215"
                    panx="-771.307031"
                    pany="220.974219"
                    zoom="1.000000"
                    instance="ID2149">
            <zorder>
              <position value="0"/>
            </zorder>
          </cpnsheet>
        </sheets>
        <zorder>
          <position value="0"/>
        </zorder>
      </cpnbinder>
    </binders>
    <monitorblock name="Monitors"/>
    <IndexNode expanded="true">
      <IndexNode expanded="false"/>
      <IndexNode expanded="false"/>
      <IndexNode expanded="false">
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false">
          <IndexNode expanded="false">
            <IndexNode expanded="false">
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
            </IndexNode>
            <IndexNode expanded="false">
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
            </IndexNode>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
          </IndexNode>
        </IndexNode>
        <IndexNode expanded="false">
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
        </IndexNode>
        <IndexNode expanded="false">
          <IndexNode expanded="false"/>
        </IndexNode>
      </IndexNode>
      <IndexNode expanded="false">
        <IndexNode expanded="false"/>
      </IndexNode>
      <IndexNode expanded="true">
        <IndexNode expanded="true">
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
        </IndexNode>
        <IndexNode expanded="false">
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
        </IndexNode>
        <IndexNode expanded="true">
          <IndexNode expanded="false">
            <IndexNode expanded="false"/>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="false">
              <IndexNode expanded="true"/>
            </IndexNode>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="false">
              <IndexNode expanded="false"/>
            </IndexNode>
            <IndexNode expanded="false">
              <IndexNode expanded="true"/>
              <IndexNode expanded="true"/>
            </IndexNode>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="false">
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
            </IndexNode>
            <IndexNode expanded="true">
              <IndexNode expanded="true"/>
              <IndexNode expanded="false"/>
            </IndexNode>
          </IndexNode>
          <IndexNode expanded="true">
            <IndexNode expanded="false">
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
            </IndexNode>
            <IndexNode expanded="false">
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
            </IndexNode>
            <IndexNode expanded="true">
              <IndexNode expanded="false">
                <IndexNode expanded="false"/>
              </IndexNode>
              <IndexNode expanded="false">
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
              </IndexNode>
              <IndexNode expanded="false">
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
              </IndexNode>
              <IndexNode expanded="true">
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
                <IndexNode expanded="true"/>
              </IndexNode>
              <IndexNode expanded="false">
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
              </IndexNode>
              <IndexNode expanded="false">
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
                <IndexNode expanded="false"/>
              </IndexNode>
              <IndexNode expanded="false">
                <IndexNode expanded="false"/>
              </IndexNode>
            </IndexNode>
          </IndexNode>
          <IndexNode expanded="true">
            <IndexNode expanded="false">
              <IndexNode expanded="false"/>
            </IndexNode>
            <IndexNode expanded="false">
              <IndexNode expanded="false"/>
            </IndexNode>
            <IndexNode expanded="true">
              <IndexNode expanded="false"/>
            </IndexNode>
          </IndexNode>
        </IndexNode>
      </IndexNode>
      <IndexNode expanded="false"/>
      <IndexNode expanded="true"/>
    </IndexNode>
  </cpnet>
</workspaceElements>